// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LssResource lss resource
//
// swagger:model LssResource
type LssResource struct {

	// config
	Config *Lss `json:"config,omitempty"`

	// connector groups
	ConnectorGroups []*AppConnectorGroup `json:"connectorGroups"`

	// id
	ID string `json:"id,omitempty"`

	// policy rule
	PolicyRule *PolicyRule `json:"policyRule,omitempty"`

	// policy rule resource
	PolicyRuleResource *PolicyRuleResource `json:"policyRuleResource,omitempty"`
}

// Validate validates this lss resource
func (m *LssResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectorGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyRule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyRuleResource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LssResource) validateConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.Config) { // not required
		return nil
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *LssResource) validateConnectorGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.ConnectorGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.ConnectorGroups); i++ {
		if swag.IsZero(m.ConnectorGroups[i]) { // not required
			continue
		}

		if m.ConnectorGroups[i] != nil {
			if err := m.ConnectorGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connectorGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("connectorGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LssResource) validatePolicyRule(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicyRule) { // not required
		return nil
	}

	if m.PolicyRule != nil {
		if err := m.PolicyRule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policyRule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policyRule")
			}
			return err
		}
	}

	return nil
}

func (m *LssResource) validatePolicyRuleResource(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicyRuleResource) { // not required
		return nil
	}

	if m.PolicyRuleResource != nil {
		if err := m.PolicyRuleResource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policyRuleResource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policyRuleResource")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this lss resource based on the context it is used
func (m *LssResource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConnectorGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicyRule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicyRuleResource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LssResource) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Config != nil {
		if err := m.Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *LssResource) contextValidateConnectorGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ConnectorGroups); i++ {

		if m.ConnectorGroups[i] != nil {
			if err := m.ConnectorGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connectorGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("connectorGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LssResource) contextValidatePolicyRule(ctx context.Context, formats strfmt.Registry) error {

	if m.PolicyRule != nil {
		if err := m.PolicyRule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policyRule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policyRule")
			}
			return err
		}
	}

	return nil
}

func (m *LssResource) contextValidatePolicyRuleResource(ctx context.Context, formats strfmt.Registry) error {

	if m.PolicyRuleResource != nil {
		if err := m.PolicyRuleResource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policyRuleResource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policyRuleResource")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LssResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LssResource) UnmarshalBinary(b []byte) error {
	var res LssResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
