// Code generated by go-swagger; DO NOT EDIT.

package policy_set_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/haarchri/zpa-go-client/pkg/models"
)

// NewAddRuleToPolicySetUsingPOST1Params creates a new AddRuleToPolicySetUsingPOST1Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAddRuleToPolicySetUsingPOST1Params() *AddRuleToPolicySetUsingPOST1Params {
	return &AddRuleToPolicySetUsingPOST1Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewAddRuleToPolicySetUsingPOST1ParamsWithTimeout creates a new AddRuleToPolicySetUsingPOST1Params object
// with the ability to set a timeout on a request.
func NewAddRuleToPolicySetUsingPOST1ParamsWithTimeout(timeout time.Duration) *AddRuleToPolicySetUsingPOST1Params {
	return &AddRuleToPolicySetUsingPOST1Params{
		timeout: timeout,
	}
}

// NewAddRuleToPolicySetUsingPOST1ParamsWithContext creates a new AddRuleToPolicySetUsingPOST1Params object
// with the ability to set a context for a request.
func NewAddRuleToPolicySetUsingPOST1ParamsWithContext(ctx context.Context) *AddRuleToPolicySetUsingPOST1Params {
	return &AddRuleToPolicySetUsingPOST1Params{
		Context: ctx,
	}
}

// NewAddRuleToPolicySetUsingPOST1ParamsWithHTTPClient creates a new AddRuleToPolicySetUsingPOST1Params object
// with the ability to set a custom HTTPClient for a request.
func NewAddRuleToPolicySetUsingPOST1ParamsWithHTTPClient(client *http.Client) *AddRuleToPolicySetUsingPOST1Params {
	return &AddRuleToPolicySetUsingPOST1Params{
		HTTPClient: client,
	}
}

/* AddRuleToPolicySetUsingPOST1Params contains all the parameters to send to the API endpoint
   for the add rule to policy set using p o s t 1 operation.

   Typically these are written to a http.Request.
*/
type AddRuleToPolicySetUsingPOST1Params struct {

	/* CustomerID.

	   The unique identifier of the ZPA tenant.
	*/
	CustomerID string

	/* PolicySetID.

	   The unique identifier of the policy.
	*/
	PolicySetID string

	/* Rule.

	   The object of the policy rule.
	*/
	Rule *models.PolicyRule

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the add rule to policy set using p o s t 1 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AddRuleToPolicySetUsingPOST1Params) WithDefaults() *AddRuleToPolicySetUsingPOST1Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the add rule to policy set using p o s t 1 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AddRuleToPolicySetUsingPOST1Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the add rule to policy set using p o s t 1 params
func (o *AddRuleToPolicySetUsingPOST1Params) WithTimeout(timeout time.Duration) *AddRuleToPolicySetUsingPOST1Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add rule to policy set using p o s t 1 params
func (o *AddRuleToPolicySetUsingPOST1Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add rule to policy set using p o s t 1 params
func (o *AddRuleToPolicySetUsingPOST1Params) WithContext(ctx context.Context) *AddRuleToPolicySetUsingPOST1Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add rule to policy set using p o s t 1 params
func (o *AddRuleToPolicySetUsingPOST1Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add rule to policy set using p o s t 1 params
func (o *AddRuleToPolicySetUsingPOST1Params) WithHTTPClient(client *http.Client) *AddRuleToPolicySetUsingPOST1Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add rule to policy set using p o s t 1 params
func (o *AddRuleToPolicySetUsingPOST1Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCustomerID adds the customerID to the add rule to policy set using p o s t 1 params
func (o *AddRuleToPolicySetUsingPOST1Params) WithCustomerID(customerID string) *AddRuleToPolicySetUsingPOST1Params {
	o.SetCustomerID(customerID)
	return o
}

// SetCustomerID adds the customerId to the add rule to policy set using p o s t 1 params
func (o *AddRuleToPolicySetUsingPOST1Params) SetCustomerID(customerID string) {
	o.CustomerID = customerID
}

// WithPolicySetID adds the policySetID to the add rule to policy set using p o s t 1 params
func (o *AddRuleToPolicySetUsingPOST1Params) WithPolicySetID(policySetID string) *AddRuleToPolicySetUsingPOST1Params {
	o.SetPolicySetID(policySetID)
	return o
}

// SetPolicySetID adds the policySetId to the add rule to policy set using p o s t 1 params
func (o *AddRuleToPolicySetUsingPOST1Params) SetPolicySetID(policySetID string) {
	o.PolicySetID = policySetID
}

// WithRule adds the rule to the add rule to policy set using p o s t 1 params
func (o *AddRuleToPolicySetUsingPOST1Params) WithRule(rule *models.PolicyRule) *AddRuleToPolicySetUsingPOST1Params {
	o.SetRule(rule)
	return o
}

// SetRule adds the rule to the add rule to policy set using p o s t 1 params
func (o *AddRuleToPolicySetUsingPOST1Params) SetRule(rule *models.PolicyRule) {
	o.Rule = rule
}

// WriteToRequest writes these params to a swagger request
func (o *AddRuleToPolicySetUsingPOST1Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param customerId
	if err := r.SetPathParam("customerId", o.CustomerID); err != nil {
		return err
	}

	// path param policySetId
	if err := r.SetPathParam("policySetId", o.PolicySetID); err != nil {
		return err
	}
	if o.Rule != nil {
		if err := r.SetBodyParam(o.Rule); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
