// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceEdgeGroup service edge group
//
// swagger:model ServiceEdgeGroup
type ServiceEdgeGroup struct {

	// city country
	CityCountry string `json:"cityCountry,omitempty"`

	// country code
	CountryCode string `json:"countryCode,omitempty"`

	// creation time
	CreationTime string `json:"creationTime,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// geo location Id
	GeoLocationID string `json:"geoLocationId,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// is public
	IsPublic string `json:"isPublic,omitempty"`

	// latitude
	Latitude string `json:"latitude,omitempty"`

	// location
	Location string `json:"location,omitempty"`

	// longitude
	Longitude string `json:"longitude,omitempty"`

	// modified by
	ModifiedBy string `json:"modifiedBy,omitempty"`

	// modified time
	ModifiedTime string `json:"modifiedTime,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// override version profile
	OverrideVersionProfile bool `json:"overrideVersionProfile,omitempty"`

	// service edges
	ServiceEdges []*ServiceEdge `json:"serviceEdges"`

	// trusted networks
	TrustedNetworks []*TrustedNetwork `json:"trustedNetworks"`

	// upgrade day
	UpgradeDay string `json:"upgradeDay,omitempty"`

	// upgrade time in secs
	UpgradeTimeInSecs string `json:"upgradeTimeInSecs,omitempty"`

	// version profile Id
	VersionProfileID string `json:"versionProfileId,omitempty"`

	// Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.
	VersionProfileName string `json:"versionProfileName,omitempty"`

	// Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.
	// Enum: [ALL NONE CUSTOM]
	VersionProfileVisibilityScope string `json:"versionProfileVisibilityScope,omitempty"`
}

// Validate validates this service edge group
func (m *ServiceEdgeGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceEdges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrustedNetworks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionProfileVisibilityScope(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceEdgeGroup) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ServiceEdgeGroup) validateServiceEdges(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceEdges) { // not required
		return nil
	}

	for i := 0; i < len(m.ServiceEdges); i++ {
		if swag.IsZero(m.ServiceEdges[i]) { // not required
			continue
		}

		if m.ServiceEdges[i] != nil {
			if err := m.ServiceEdges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("serviceEdges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("serviceEdges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceEdgeGroup) validateTrustedNetworks(formats strfmt.Registry) error {
	if swag.IsZero(m.TrustedNetworks) { // not required
		return nil
	}

	for i := 0; i < len(m.TrustedNetworks); i++ {
		if swag.IsZero(m.TrustedNetworks[i]) { // not required
			continue
		}

		if m.TrustedNetworks[i] != nil {
			if err := m.TrustedNetworks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("trustedNetworks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("trustedNetworks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var serviceEdgeGroupTypeVersionProfileVisibilityScopePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ALL","NONE","CUSTOM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceEdgeGroupTypeVersionProfileVisibilityScopePropEnum = append(serviceEdgeGroupTypeVersionProfileVisibilityScopePropEnum, v)
	}
}

const (

	// ServiceEdgeGroupVersionProfileVisibilityScopeALL captures enum value "ALL"
	ServiceEdgeGroupVersionProfileVisibilityScopeALL string = "ALL"

	// ServiceEdgeGroupVersionProfileVisibilityScopeNONE captures enum value "NONE"
	ServiceEdgeGroupVersionProfileVisibilityScopeNONE string = "NONE"

	// ServiceEdgeGroupVersionProfileVisibilityScopeCUSTOM captures enum value "CUSTOM"
	ServiceEdgeGroupVersionProfileVisibilityScopeCUSTOM string = "CUSTOM"
)

// prop value enum
func (m *ServiceEdgeGroup) validateVersionProfileVisibilityScopeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serviceEdgeGroupTypeVersionProfileVisibilityScopePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServiceEdgeGroup) validateVersionProfileVisibilityScope(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionProfileVisibilityScope) { // not required
		return nil
	}

	// value enum
	if err := m.validateVersionProfileVisibilityScopeEnum("versionProfileVisibilityScope", "body", m.VersionProfileVisibilityScope); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this service edge group based on the context it is used
func (m *ServiceEdgeGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateServiceEdges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrustedNetworks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceEdgeGroup) contextValidateServiceEdges(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ServiceEdges); i++ {

		if m.ServiceEdges[i] != nil {
			if err := m.ServiceEdges[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("serviceEdges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("serviceEdges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceEdgeGroup) contextValidateTrustedNetworks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TrustedNetworks); i++ {

		if m.TrustedNetworks[i] != nil {
			if err := m.TrustedNetworks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("trustedNetworks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("trustedNetworks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceEdgeGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceEdgeGroup) UnmarshalBinary(b []byte) error {
	var res ServiceEdgeGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
