// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OperandResource operand resource
//
// swagger:model OperandResource
type OperandResource struct {

	// common properties
	CommonProperties *Operand `json:"commonProperties,omitempty"`

	// Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.
	CreationTime string `json:"creationTime,omitempty"`

	// entry values
	EntryValues []*LHSRHSValueResource `json:"entryValues"`

	// Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.
	ID string `json:"id,omitempty"`

	// idp Id
	IdpID string `json:"idpId,omitempty"`

	// Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.
	ModifiedBy string `json:"modifiedBy,omitempty"`

	// Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.
	ModifiedTime string `json:"modifiedTime,omitempty"`

	// object type
	// Enum: [USER USER_GROUP LOCATION APP APP_GROUP SAML POSTURE CLIENT_TYPE IDP TRUSTED_NETWORK EDGE_CONNECTOR_GROUP MACHINE_GRP SCIM SCIM_GROUP]
	ObjectType string `json:"objectType,omitempty"`

	// values
	Values []string `json:"values"`
}

// Validate validates this operand resource
func (m *OperandResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommonProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntryValues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OperandResource) validateCommonProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.CommonProperties) { // not required
		return nil
	}

	if m.CommonProperties != nil {
		if err := m.CommonProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commonProperties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commonProperties")
			}
			return err
		}
	}

	return nil
}

func (m *OperandResource) validateEntryValues(formats strfmt.Registry) error {
	if swag.IsZero(m.EntryValues) { // not required
		return nil
	}

	for i := 0; i < len(m.EntryValues); i++ {
		if swag.IsZero(m.EntryValues[i]) { // not required
			continue
		}

		if m.EntryValues[i] != nil {
			if err := m.EntryValues[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entryValues" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("entryValues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var operandResourceTypeObjectTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["USER","USER_GROUP","LOCATION","APP","APP_GROUP","SAML","POSTURE","CLIENT_TYPE","IDP","TRUSTED_NETWORK","EDGE_CONNECTOR_GROUP","MACHINE_GRP","SCIM","SCIM_GROUP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		operandResourceTypeObjectTypePropEnum = append(operandResourceTypeObjectTypePropEnum, v)
	}
}

const (

	// OperandResourceObjectTypeUSER captures enum value "USER"
	OperandResourceObjectTypeUSER string = "USER"

	// OperandResourceObjectTypeUSERGROUP captures enum value "USER_GROUP"
	OperandResourceObjectTypeUSERGROUP string = "USER_GROUP"

	// OperandResourceObjectTypeLOCATION captures enum value "LOCATION"
	OperandResourceObjectTypeLOCATION string = "LOCATION"

	// OperandResourceObjectTypeAPP captures enum value "APP"
	OperandResourceObjectTypeAPP string = "APP"

	// OperandResourceObjectTypeAPPGROUP captures enum value "APP_GROUP"
	OperandResourceObjectTypeAPPGROUP string = "APP_GROUP"

	// OperandResourceObjectTypeSAML captures enum value "SAML"
	OperandResourceObjectTypeSAML string = "SAML"

	// OperandResourceObjectTypePOSTURE captures enum value "POSTURE"
	OperandResourceObjectTypePOSTURE string = "POSTURE"

	// OperandResourceObjectTypeCLIENTTYPE captures enum value "CLIENT_TYPE"
	OperandResourceObjectTypeCLIENTTYPE string = "CLIENT_TYPE"

	// OperandResourceObjectTypeIDP captures enum value "IDP"
	OperandResourceObjectTypeIDP string = "IDP"

	// OperandResourceObjectTypeTRUSTEDNETWORK captures enum value "TRUSTED_NETWORK"
	OperandResourceObjectTypeTRUSTEDNETWORK string = "TRUSTED_NETWORK"

	// OperandResourceObjectTypeEDGECONNECTORGROUP captures enum value "EDGE_CONNECTOR_GROUP"
	OperandResourceObjectTypeEDGECONNECTORGROUP string = "EDGE_CONNECTOR_GROUP"

	// OperandResourceObjectTypeMACHINEGRP captures enum value "MACHINE_GRP"
	OperandResourceObjectTypeMACHINEGRP string = "MACHINE_GRP"

	// OperandResourceObjectTypeSCIM captures enum value "SCIM"
	OperandResourceObjectTypeSCIM string = "SCIM"

	// OperandResourceObjectTypeSCIMGROUP captures enum value "SCIM_GROUP"
	OperandResourceObjectTypeSCIMGROUP string = "SCIM_GROUP"
)

// prop value enum
func (m *OperandResource) validateObjectTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, operandResourceTypeObjectTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OperandResource) validateObjectType(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectType) { // not required
		return nil
	}

	// value enum
	if err := m.validateObjectTypeEnum("objectType", "body", m.ObjectType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this operand resource based on the context it is used
func (m *OperandResource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCommonProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntryValues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OperandResource) contextValidateCommonProperties(ctx context.Context, formats strfmt.Registry) error {

	if m.CommonProperties != nil {
		if err := m.CommonProperties.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commonProperties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commonProperties")
			}
			return err
		}
	}

	return nil
}

func (m *OperandResource) contextValidateEntryValues(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntryValues); i++ {

		if m.EntryValues[i] != nil {
			if err := m.EntryValues[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entryValues" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("entryValues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OperandResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperandResource) UnmarshalBinary(b []byte) error {
	var res OperandResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
