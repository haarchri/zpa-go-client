// Code generated by go-swagger; DO NOT EDIT.

package server_group_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new server group controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for server group controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddAppServerGroupUsingPOST1(params *AddAppServerGroupUsingPOST1Params, opts ...ClientOption) (*AddAppServerGroupUsingPOST1Created, error)

	DeleteAppServerGroupUsingDELETE1(params *DeleteAppServerGroupUsingDELETE1Params, opts ...ClientOption) (*DeleteAppServerGroupUsingDELETE1NoContent, error)

	GetAllServerGroupsUsingGET1(params *GetAllServerGroupsUsingGET1Params, opts ...ClientOption) (*GetAllServerGroupsUsingGET1OK, error)

	GetServerGroupUsingGET1(params *GetServerGroupUsingGET1Params, opts ...ClientOption) (*GetServerGroupUsingGET1OK, error)

	UpdateAppServerGroupUsingPUT1(params *UpdateAppServerGroupUsingPUT1Params, opts ...ClientOption) (*UpdateAppServerGroupUsingPUT1Created, *UpdateAppServerGroupUsingPUT1NoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddAppServerGroupUsingPOST1 adds a new server group
*/
func (a *Client) AddAppServerGroupUsingPOST1(params *AddAppServerGroupUsingPOST1Params, opts ...ClientOption) (*AddAppServerGroupUsingPOST1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAppServerGroupUsingPOST1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "addAppServerGroupUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/mgmtconfig/v1/admin/customers/{customerId}/serverGroup",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddAppServerGroupUsingPOST1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddAppServerGroupUsingPOST1Created)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addAppServerGroupUsingPOST_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAppServerGroupUsingDELETE1 deletes a server group
*/
func (a *Client) DeleteAppServerGroupUsingDELETE1(params *DeleteAppServerGroupUsingDELETE1Params, opts ...ClientOption) (*DeleteAppServerGroupUsingDELETE1NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAppServerGroupUsingDELETE1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAppServerGroupUsingDELETE_1",
		Method:             "DELETE",
		PathPattern:        "/mgmtconfig/v1/admin/customers/{customerId}/serverGroup/{groupId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAppServerGroupUsingDELETE1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAppServerGroupUsingDELETE1NoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAppServerGroupUsingDELETE_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllServerGroupsUsingGET1 gets all configured server groups
*/
func (a *Client) GetAllServerGroupsUsingGET1(params *GetAllServerGroupsUsingGET1Params, opts ...ClientOption) (*GetAllServerGroupsUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllServerGroupsUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllServerGroupsUsingGET_1",
		Method:             "GET",
		PathPattern:        "/mgmtconfig/v1/admin/customers/{customerId}/serverGroup",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllServerGroupsUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllServerGroupsUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllServerGroupsUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetServerGroupUsingGET1 gets the server group details
*/
func (a *Client) GetServerGroupUsingGET1(params *GetServerGroupUsingGET1Params, opts ...ClientOption) (*GetServerGroupUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServerGroupUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getServerGroupUsingGET_1",
		Method:             "GET",
		PathPattern:        "/mgmtconfig/v1/admin/customers/{customerId}/serverGroup/{groupId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServerGroupUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServerGroupUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServerGroupUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAppServerGroupUsingPUT1 updates the server group
*/
func (a *Client) UpdateAppServerGroupUsingPUT1(params *UpdateAppServerGroupUsingPUT1Params, opts ...ClientOption) (*UpdateAppServerGroupUsingPUT1Created, *UpdateAppServerGroupUsingPUT1NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAppServerGroupUsingPUT1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAppServerGroupUsingPUT_1",
		Method:             "PUT",
		PathPattern:        "/mgmtconfig/v1/admin/customers/{customerId}/serverGroup/{groupId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAppServerGroupUsingPUT1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateAppServerGroupUsingPUT1Created:
		return value, nil, nil
	case *UpdateAppServerGroupUsingPUT1NoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for server_group_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
