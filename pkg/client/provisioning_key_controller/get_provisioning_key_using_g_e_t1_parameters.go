// Code generated by go-swagger; DO NOT EDIT.

package provisioning_key_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetProvisioningKeyUsingGET1Params creates a new GetProvisioningKeyUsingGET1Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetProvisioningKeyUsingGET1Params() *GetProvisioningKeyUsingGET1Params {
	return &GetProvisioningKeyUsingGET1Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetProvisioningKeyUsingGET1ParamsWithTimeout creates a new GetProvisioningKeyUsingGET1Params object
// with the ability to set a timeout on a request.
func NewGetProvisioningKeyUsingGET1ParamsWithTimeout(timeout time.Duration) *GetProvisioningKeyUsingGET1Params {
	return &GetProvisioningKeyUsingGET1Params{
		timeout: timeout,
	}
}

// NewGetProvisioningKeyUsingGET1ParamsWithContext creates a new GetProvisioningKeyUsingGET1Params object
// with the ability to set a context for a request.
func NewGetProvisioningKeyUsingGET1ParamsWithContext(ctx context.Context) *GetProvisioningKeyUsingGET1Params {
	return &GetProvisioningKeyUsingGET1Params{
		Context: ctx,
	}
}

// NewGetProvisioningKeyUsingGET1ParamsWithHTTPClient creates a new GetProvisioningKeyUsingGET1Params object
// with the ability to set a custom HTTPClient for a request.
func NewGetProvisioningKeyUsingGET1ParamsWithHTTPClient(client *http.Client) *GetProvisioningKeyUsingGET1Params {
	return &GetProvisioningKeyUsingGET1Params{
		HTTPClient: client,
	}
}

/* GetProvisioningKeyUsingGET1Params contains all the parameters to send to the API endpoint
   for the get provisioning key using g e t 1 operation.

   Typically these are written to a http.Request.
*/
type GetProvisioningKeyUsingGET1Params struct {

	/* AssociationType.

	   Specifies the provisioning key type for App Connectors or ZPA Private Service Edges. The supported values are CONNECTOR_GRP and SERVICE_EDGE_GRP.
	*/
	AssociationType string

	/* CustomerID.

	   The unique identifier of the ZPA tenant.
	*/
	CustomerID string

	/* ProvisioningKeyID.

	   The unique identifier of the Provisioning Key.
	*/
	ProvisioningKeyID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get provisioning key using g e t 1 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProvisioningKeyUsingGET1Params) WithDefaults() *GetProvisioningKeyUsingGET1Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get provisioning key using g e t 1 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProvisioningKeyUsingGET1Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get provisioning key using g e t 1 params
func (o *GetProvisioningKeyUsingGET1Params) WithTimeout(timeout time.Duration) *GetProvisioningKeyUsingGET1Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get provisioning key using g e t 1 params
func (o *GetProvisioningKeyUsingGET1Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get provisioning key using g e t 1 params
func (o *GetProvisioningKeyUsingGET1Params) WithContext(ctx context.Context) *GetProvisioningKeyUsingGET1Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get provisioning key using g e t 1 params
func (o *GetProvisioningKeyUsingGET1Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get provisioning key using g e t 1 params
func (o *GetProvisioningKeyUsingGET1Params) WithHTTPClient(client *http.Client) *GetProvisioningKeyUsingGET1Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get provisioning key using g e t 1 params
func (o *GetProvisioningKeyUsingGET1Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAssociationType adds the associationType to the get provisioning key using g e t 1 params
func (o *GetProvisioningKeyUsingGET1Params) WithAssociationType(associationType string) *GetProvisioningKeyUsingGET1Params {
	o.SetAssociationType(associationType)
	return o
}

// SetAssociationType adds the associationType to the get provisioning key using g e t 1 params
func (o *GetProvisioningKeyUsingGET1Params) SetAssociationType(associationType string) {
	o.AssociationType = associationType
}

// WithCustomerID adds the customerID to the get provisioning key using g e t 1 params
func (o *GetProvisioningKeyUsingGET1Params) WithCustomerID(customerID string) *GetProvisioningKeyUsingGET1Params {
	o.SetCustomerID(customerID)
	return o
}

// SetCustomerID adds the customerId to the get provisioning key using g e t 1 params
func (o *GetProvisioningKeyUsingGET1Params) SetCustomerID(customerID string) {
	o.CustomerID = customerID
}

// WithProvisioningKeyID adds the provisioningKeyID to the get provisioning key using g e t 1 params
func (o *GetProvisioningKeyUsingGET1Params) WithProvisioningKeyID(provisioningKeyID string) *GetProvisioningKeyUsingGET1Params {
	o.SetProvisioningKeyID(provisioningKeyID)
	return o
}

// SetProvisioningKeyID adds the provisioningKeyId to the get provisioning key using g e t 1 params
func (o *GetProvisioningKeyUsingGET1Params) SetProvisioningKeyID(provisioningKeyID string) {
	o.ProvisioningKeyID = provisioningKeyID
}

// WriteToRequest writes these params to a swagger request
func (o *GetProvisioningKeyUsingGET1Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param associationType
	if err := r.SetPathParam("associationType", o.AssociationType); err != nil {
		return err
	}

	// path param customerId
	if err := r.SetPathParam("customerId", o.CustomerID); err != nil {
		return err
	}

	// path param provisioningKeyId
	if err := r.SetPathParam("provisioningKeyId", o.ProvisioningKeyID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
