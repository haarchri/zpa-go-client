// Code generated by go-swagger; DO NOT EDIT.

package lss_config_controller_v_2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/haarchri/zpa-go-client/pkg/models"
)

// GetAllUsingGET8Reader is a Reader for the GetAllUsingGET8 structure.
type GetAllUsingGET8Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllUsingGET8Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllUsingGET8OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAllUsingGET8BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAllUsingGET8Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllUsingGET8Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllUsingGET8NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetAllUsingGET8TooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAllUsingGET8OK creates a GetAllUsingGET8OK with default headers values
func NewGetAllUsingGET8OK() *GetAllUsingGET8OK {
	return &GetAllUsingGET8OK{}
}

/* GetAllUsingGET8OK describes a response with status code 200, with default header values.

OK
*/
type GetAllUsingGET8OK struct {
	Payload *models.PageListOfLssResource
}

func (o *GetAllUsingGET8OK) Error() string {
	return fmt.Sprintf("[GET /mgmtconfig/v2/admin/customers/{customerId}/lssConfig][%d] getAllUsingGET8OK  %+v", 200, o.Payload)
}
func (o *GetAllUsingGET8OK) GetPayload() *models.PageListOfLssResource {
	return o.Payload
}

func (o *GetAllUsingGET8OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PageListOfLssResource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllUsingGET8BadRequest creates a GetAllUsingGET8BadRequest with default headers values
func NewGetAllUsingGET8BadRequest() *GetAllUsingGET8BadRequest {
	return &GetAllUsingGET8BadRequest{}
}

/* GetAllUsingGET8BadRequest describes a response with status code 400, with default header values.

BadRequest
*/
type GetAllUsingGET8BadRequest struct {
}

func (o *GetAllUsingGET8BadRequest) Error() string {
	return fmt.Sprintf("[GET /mgmtconfig/v2/admin/customers/{customerId}/lssConfig][%d] getAllUsingGET8BadRequest ", 400)
}

func (o *GetAllUsingGET8BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllUsingGET8Unauthorized creates a GetAllUsingGET8Unauthorized with default headers values
func NewGetAllUsingGET8Unauthorized() *GetAllUsingGET8Unauthorized {
	return &GetAllUsingGET8Unauthorized{}
}

/* GetAllUsingGET8Unauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAllUsingGET8Unauthorized struct {
}

func (o *GetAllUsingGET8Unauthorized) Error() string {
	return fmt.Sprintf("[GET /mgmtconfig/v2/admin/customers/{customerId}/lssConfig][%d] getAllUsingGET8Unauthorized ", 401)
}

func (o *GetAllUsingGET8Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllUsingGET8Forbidden creates a GetAllUsingGET8Forbidden with default headers values
func NewGetAllUsingGET8Forbidden() *GetAllUsingGET8Forbidden {
	return &GetAllUsingGET8Forbidden{}
}

/* GetAllUsingGET8Forbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAllUsingGET8Forbidden struct {
}

func (o *GetAllUsingGET8Forbidden) Error() string {
	return fmt.Sprintf("[GET /mgmtconfig/v2/admin/customers/{customerId}/lssConfig][%d] getAllUsingGET8Forbidden ", 403)
}

func (o *GetAllUsingGET8Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllUsingGET8NotFound creates a GetAllUsingGET8NotFound with default headers values
func NewGetAllUsingGET8NotFound() *GetAllUsingGET8NotFound {
	return &GetAllUsingGET8NotFound{}
}

/* GetAllUsingGET8NotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllUsingGET8NotFound struct {
}

func (o *GetAllUsingGET8NotFound) Error() string {
	return fmt.Sprintf("[GET /mgmtconfig/v2/admin/customers/{customerId}/lssConfig][%d] getAllUsingGET8NotFound ", 404)
}

func (o *GetAllUsingGET8NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllUsingGET8TooManyRequests creates a GetAllUsingGET8TooManyRequests with default headers values
func NewGetAllUsingGET8TooManyRequests() *GetAllUsingGET8TooManyRequests {
	return &GetAllUsingGET8TooManyRequests{}
}

/* GetAllUsingGET8TooManyRequests describes a response with status code 429, with default header values.

TooManyRequest
*/
type GetAllUsingGET8TooManyRequests struct {
}

func (o *GetAllUsingGET8TooManyRequests) Error() string {
	return fmt.Sprintf("[GET /mgmtconfig/v2/admin/customers/{customerId}/lssConfig][%d] getAllUsingGET8TooManyRequests ", 429)
}

func (o *GetAllUsingGET8TooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
