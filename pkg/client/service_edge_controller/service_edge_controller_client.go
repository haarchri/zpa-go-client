// Code generated by go-swagger; DO NOT EDIT.

package service_edge_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new service edge controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for service edge controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	BulkDeleteServiceEdgeUsingPOST(params *BulkDeleteServiceEdgeUsingPOSTParams, opts ...ClientOption) (*BulkDeleteServiceEdgeUsingPOSTOK, *BulkDeleteServiceEdgeUsingPOSTCreated, error)

	DeleteServiceEdgeUsingDELETE(params *DeleteServiceEdgeUsingDELETEParams, opts ...ClientOption) (*DeleteServiceEdgeUsingDELETENoContent, error)

	GetAllServiceEdgesUsingGET(params *GetAllServiceEdgesUsingGETParams, opts ...ClientOption) (*GetAllServiceEdgesUsingGETOK, error)

	GetServiceEdgeUsingGET1(params *GetServiceEdgeUsingGET1Params, opts ...ClientOption) (*GetServiceEdgeUsingGET1OK, error)

	UpdateServiceEdgeUsingPUT(params *UpdateServiceEdgeUsingPUTParams, opts ...ClientOption) (*UpdateServiceEdgeUsingPUTCreated, *UpdateServiceEdgeUsingPUTNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  BulkDeleteServiceEdgeUsingPOST bulks delete the service edges
*/
func (a *Client) BulkDeleteServiceEdgeUsingPOST(params *BulkDeleteServiceEdgeUsingPOSTParams, opts ...ClientOption) (*BulkDeleteServiceEdgeUsingPOSTOK, *BulkDeleteServiceEdgeUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkDeleteServiceEdgeUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "bulkDeleteServiceEdgeUsingPOST",
		Method:             "POST",
		PathPattern:        "/mgmtconfig/v1/admin/customers/{customerId}/serviceEdge/bulkDelete",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkDeleteServiceEdgeUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *BulkDeleteServiceEdgeUsingPOSTOK:
		return value, nil, nil
	case *BulkDeleteServiceEdgeUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for service_edge_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteServiceEdgeUsingDELETE deletes the service edge
*/
func (a *Client) DeleteServiceEdgeUsingDELETE(params *DeleteServiceEdgeUsingDELETEParams, opts ...ClientOption) (*DeleteServiceEdgeUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServiceEdgeUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteServiceEdgeUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/mgmtconfig/v1/admin/customers/{customerId}/serviceEdge/{serviceEdgeId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteServiceEdgeUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteServiceEdgeUsingDELETENoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteServiceEdgeUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllServiceEdgesUsingGET gets all the configured service edge details
*/
func (a *Client) GetAllServiceEdgesUsingGET(params *GetAllServiceEdgesUsingGETParams, opts ...ClientOption) (*GetAllServiceEdgesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllServiceEdgesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllServiceEdgesUsingGET",
		Method:             "GET",
		PathPattern:        "/mgmtconfig/v1/admin/customers/{customerId}/serviceEdge",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllServiceEdgesUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllServiceEdgesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllServiceEdgesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetServiceEdgeUsingGET1 gets the service edge details
*/
func (a *Client) GetServiceEdgeUsingGET1(params *GetServiceEdgeUsingGET1Params, opts ...ClientOption) (*GetServiceEdgeUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceEdgeUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getServiceEdgeUsingGET_1",
		Method:             "GET",
		PathPattern:        "/mgmtconfig/v1/admin/customers/{customerId}/serviceEdge/{serviceEdgeId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServiceEdgeUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceEdgeUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServiceEdgeUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateServiceEdgeUsingPUT updates the service edge details
*/
func (a *Client) UpdateServiceEdgeUsingPUT(params *UpdateServiceEdgeUsingPUTParams, opts ...ClientOption) (*UpdateServiceEdgeUsingPUTCreated, *UpdateServiceEdgeUsingPUTNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServiceEdgeUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateServiceEdgeUsingPUT",
		Method:             "PUT",
		PathPattern:        "/mgmtconfig/v1/admin/customers/{customerId}/serviceEdge/{serviceEdgeId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateServiceEdgeUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateServiceEdgeUsingPUTCreated:
		return value, nil, nil
	case *UpdateServiceEdgeUsingPUTNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for service_edge_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
