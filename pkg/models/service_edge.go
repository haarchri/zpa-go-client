// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceEdge service edge
//
// swagger:model ServiceEdge
type ServiceEdge struct {

	// application start time
	ApplicationStartTime string `json:"applicationStartTime,omitempty"`

	// ReadOnly. Ignored in PUT/POST calls. Expected values: UNKNOWN/ZPN_STATUS_AUTHENTICATED(1)/ZPN_STATUS_DISCONNECTED
	// Enum: [UNKNOWN ZPN_STATUS_AUTHENTICATED ZPN_STATUS_DISCONNECTED]
	ControlChannelStatus string `json:"controlChannelStatus,omitempty"`

	// creation time
	CreationTime string `json:"creationTime,omitempty"`

	// ReadOnly. Ignored in PUT/POST calls.
	CtrlBrokerName string `json:"ctrlBrokerName,omitempty"`

	// ReadOnly. Ignored in PUT/POST calls
	CurrentVersion string `json:"currentVersion,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// enrollment cert
	EnrollmentCert map[string]string `json:"enrollmentCert,omitempty"`

	// ReadOnly. Ignored in PUT/POST calls
	ExpectedUpgradeTime string `json:"expectedUpgradeTime,omitempty"`

	// ReadOnly. Ignored in PUT/POST calls
	ExpectedVersion string `json:"expectedVersion,omitempty"`

	// fingerprint
	Fingerprint string `json:"fingerprint,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// ip Acl
	IPACL []string `json:"ipAcl"`

	// issued cert Id
	IssuedCertID string `json:"issuedCertId,omitempty"`

	// ReadOnly. Ignored in PUT/POST calls.
	LastBrokerConnectTime string `json:"lastBrokerConnectTime,omitempty"`

	// Read only. Ignored in PUT/POST calls.
	LastBrokerConnectTimeDuration string `json:"lastBrokerConnectTimeDuration,omitempty"`

	// ReadOnly. Ignored in PUT/POST calls.
	LastBrokerDisconnectTime string `json:"lastBrokerDisconnectTime,omitempty"`

	// Read only. Ignored in PUT/POST calls.
	LastBrokerDisconnectTimeDuration string `json:"lastBrokerDisconnectTimeDuration,omitempty"`

	// ReadOnly. Ignored in PUT/POST calls
	LastUpgradeTime string `json:"lastUpgradeTime,omitempty"`

	// latitude
	Latitude string `json:"latitude,omitempty"`

	// listen ips
	ListenIps []string `json:"listenIps"`

	// location
	Location string `json:"location,omitempty"`

	// longitude
	Longitude string `json:"longitude,omitempty"`

	// modified by
	ModifiedBy string `json:"modifiedBy,omitempty"`

	// modified time
	ModifiedTime string `json:"modifiedTime,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// platform
	Platform string `json:"platform,omitempty"`

	// ReadOnly. Ignored in PUT/POST calls
	PreviousVersion string `json:"previousVersion,omitempty"`

	// private Ip
	PrivateIP string `json:"privateIp,omitempty"`

	// provisioning key Id
	ProvisioningKeyID string `json:"provisioningKeyId,omitempty"`

	// provisioning key name
	ProvisioningKeyName string `json:"provisioningKeyName,omitempty"`

	// public Ip
	PublicIP string `json:"publicIp,omitempty"`

	// publish ips
	PublishIps []string `json:"publishIps"`

	// sarge version
	SargeVersion string `json:"sargeVersion,omitempty"`

	// service edge group Id
	ServiceEdgeGroupID string `json:"serviceEdgeGroupId,omitempty"`

	// service edge group name
	ServiceEdgeGroupName string `json:"serviceEdgeGroupName,omitempty"`

	// ReadOnly. Ignored in PUT/POST calls.
	UpgradeAttempt string `json:"upgradeAttempt,omitempty"`

	// ReadOnly. Ignored in PUT/POST calls
	// Enum: [COMPLETE IN_PROGRESS FAILED UNKNOWN RESTARTING]
	UpgradeStatus string `json:"upgradeStatus,omitempty"`
}

// Validate validates this service edge
func (m *ServiceEdge) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateControlChannelStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgradeStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var serviceEdgeTypeControlChannelStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UNKNOWN","ZPN_STATUS_AUTHENTICATED","ZPN_STATUS_DISCONNECTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceEdgeTypeControlChannelStatusPropEnum = append(serviceEdgeTypeControlChannelStatusPropEnum, v)
	}
}

const (

	// ServiceEdgeControlChannelStatusUNKNOWN captures enum value "UNKNOWN"
	ServiceEdgeControlChannelStatusUNKNOWN string = "UNKNOWN"

	// ServiceEdgeControlChannelStatusZPNSTATUSAUTHENTICATED captures enum value "ZPN_STATUS_AUTHENTICATED"
	ServiceEdgeControlChannelStatusZPNSTATUSAUTHENTICATED string = "ZPN_STATUS_AUTHENTICATED"

	// ServiceEdgeControlChannelStatusZPNSTATUSDISCONNECTED captures enum value "ZPN_STATUS_DISCONNECTED"
	ServiceEdgeControlChannelStatusZPNSTATUSDISCONNECTED string = "ZPN_STATUS_DISCONNECTED"
)

// prop value enum
func (m *ServiceEdge) validateControlChannelStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serviceEdgeTypeControlChannelStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServiceEdge) validateControlChannelStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ControlChannelStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateControlChannelStatusEnum("controlChannelStatus", "body", m.ControlChannelStatus); err != nil {
		return err
	}

	return nil
}

func (m *ServiceEdge) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var serviceEdgeTypeUpgradeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["COMPLETE","IN_PROGRESS","FAILED","UNKNOWN","RESTARTING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceEdgeTypeUpgradeStatusPropEnum = append(serviceEdgeTypeUpgradeStatusPropEnum, v)
	}
}

const (

	// ServiceEdgeUpgradeStatusCOMPLETE captures enum value "COMPLETE"
	ServiceEdgeUpgradeStatusCOMPLETE string = "COMPLETE"

	// ServiceEdgeUpgradeStatusINPROGRESS captures enum value "IN_PROGRESS"
	ServiceEdgeUpgradeStatusINPROGRESS string = "IN_PROGRESS"

	// ServiceEdgeUpgradeStatusFAILED captures enum value "FAILED"
	ServiceEdgeUpgradeStatusFAILED string = "FAILED"

	// ServiceEdgeUpgradeStatusUNKNOWN captures enum value "UNKNOWN"
	ServiceEdgeUpgradeStatusUNKNOWN string = "UNKNOWN"

	// ServiceEdgeUpgradeStatusRESTARTING captures enum value "RESTARTING"
	ServiceEdgeUpgradeStatusRESTARTING string = "RESTARTING"
)

// prop value enum
func (m *ServiceEdge) validateUpgradeStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serviceEdgeTypeUpgradeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServiceEdge) validateUpgradeStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.UpgradeStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateUpgradeStatusEnum("upgradeStatus", "body", m.UpgradeStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this service edge based on context it is used
func (m *ServiceEdge) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServiceEdge) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceEdge) UnmarshalBinary(b []byte) error {
	var res ServiceEdge
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
