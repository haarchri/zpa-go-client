// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EnrollmentCert enrollment cert
//
// swagger:model EnrollmentCert
type EnrollmentCert struct {

	// Not applicable for put and post calls. This field will be extracted from certificate.
	AllowSigning bool `json:"allowSigning,omitempty"`

	// Not applicable for put and post calls. This field will be extracted from certificate.
	CName string `json:"cName,omitempty"`

	// certificate text in pem format.
	// Required: true
	Certificate *string `json:"certificate"`

	// Read only property. Applicable only for GET calls, ignored in PUT/POST calls.
	// Enum: [ZAPP_CLIENT ISOLATION_CLIENT NONE]
	ClientCertType string `json:"clientCertType,omitempty"`

	// creation time
	CreationTime string `json:"creationTime,omitempty"`

	// csr
	Csr string `json:"csr,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// issued by
	IssuedBy string `json:"issuedBy,omitempty"`

	// issued to
	IssuedTo string `json:"issuedTo,omitempty"`

	// modified by
	ModifiedBy string `json:"modifiedBy,omitempty"`

	// modified time
	ModifiedTime string `json:"modifiedTime,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// parent cert Id
	ParentCertID string `json:"parentCertId,omitempty"`

	// Read only property. Applicable only for GET calls, ignored in PUT/POST calls.
	ParentCertName string `json:"parentCertName,omitempty"`

	// private key
	PrivateKey string `json:"privateKey,omitempty"`

	// Read only property. Applicable only for GET calls, ignored in PUT/POST calls.
	PrivateKeyPresent bool `json:"privateKeyPresent,omitempty"`

	// serial no
	SerialNo string `json:"serialNo,omitempty"`

	// Not applicable for put and post calls. This field will be extracted from certificate.
	ValidFromInEpochSec string `json:"validFromInEpochSec,omitempty"`

	// Not applicable for put and post calls. This field will be extracted from certificate.
	ValidToInEpochSec string `json:"validToInEpochSec,omitempty"`

	// zrsaencryptedprivatekey
	Zrsaencryptedprivatekey string `json:"zrsaencryptedprivatekey,omitempty"`

	// zrsaencryptedsessionkey
	Zrsaencryptedsessionkey string `json:"zrsaencryptedsessionkey,omitempty"`
}

// Validate validates this enrollment cert
func (m *EnrollmentCert) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientCertType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnrollmentCert) validateCertificate(formats strfmt.Registry) error {

	if err := validate.Required("certificate", "body", m.Certificate); err != nil {
		return err
	}

	return nil
}

var enrollmentCertTypeClientCertTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ZAPP_CLIENT","ISOLATION_CLIENT","NONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		enrollmentCertTypeClientCertTypePropEnum = append(enrollmentCertTypeClientCertTypePropEnum, v)
	}
}

const (

	// EnrollmentCertClientCertTypeZAPPCLIENT captures enum value "ZAPP_CLIENT"
	EnrollmentCertClientCertTypeZAPPCLIENT string = "ZAPP_CLIENT"

	// EnrollmentCertClientCertTypeISOLATIONCLIENT captures enum value "ISOLATION_CLIENT"
	EnrollmentCertClientCertTypeISOLATIONCLIENT string = "ISOLATION_CLIENT"

	// EnrollmentCertClientCertTypeNONE captures enum value "NONE"
	EnrollmentCertClientCertTypeNONE string = "NONE"
)

// prop value enum
func (m *EnrollmentCert) validateClientCertTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, enrollmentCertTypeClientCertTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EnrollmentCert) validateClientCertType(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientCertType) { // not required
		return nil
	}

	// value enum
	if err := m.validateClientCertTypeEnum("clientCertType", "body", m.ClientCertType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this enrollment cert based on context it is used
func (m *EnrollmentCert) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnrollmentCert) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnrollmentCert) UnmarshalBinary(b []byte) error {
	var res EnrollmentCert
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
