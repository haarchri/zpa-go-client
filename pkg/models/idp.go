// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Idp idp
//
// swagger:model Idp
type Idp struct {

	// admin metadata
	AdminMetadata *ServiceProvider `json:"adminMetadata,omitempty"`

	// admin sp signing cert Id
	AdminSpSigningCertID int64 `json:"adminSpSigningCertId,omitempty"`

	// defaults to 0.
	AutoProvision int32 `json:"autoProvision,omitempty"`

	// certificates
	Certificates []*IdpCertDto `json:"certificates"`

	// creation time
	CreationTime int32 `json:"creationTime,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// disable saml based policy
	DisableSamlBasedPolicy bool `json:"disableSamlBasedPolicy,omitempty"`

	// domain list
	DomainList []string `json:"domainList"`

	// enable scim based policy
	EnableScimBasedPolicy bool `json:"enableScimBasedPolicy,omitempty"`

	// Default value if null is True.
	Enabled bool `json:"enabled,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// idp entity Id
	// Required: true
	IdpEntityID *string `json:"idpEntityId"`

	// login name attribute
	LoginNameAttribute string `json:"loginNameAttribute,omitempty"`

	// login Url
	// Required: true
	LoginURL *string `json:"loginUrl"`

	// modified by
	ModifiedBy int64 `json:"modifiedBy,omitempty"`

	// modified time
	ModifiedTime int32 `json:"modifiedTime,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// reauth on user update
	ReauthOnUserUpdate bool `json:"reauthOnUserUpdate,omitempty"`

	// redirect binding
	RedirectBinding bool `json:"redirectBinding,omitempty"`

	// scim enabled
	ScimEnabled bool `json:"scimEnabled,omitempty"`

	// scim service provider endpoint
	ScimServiceProviderEndpoint string `json:"scimServiceProviderEndpoint,omitempty"`

	// scim shared secret
	ScimSharedSecret string `json:"scimSharedSecret,omitempty"`

	// scim shared secret exists
	ScimSharedSecretExists bool `json:"scimSharedSecretExists,omitempty"`

	// Defaults to 1.
	SignSamlRequest int32 `json:"signSamlRequest,omitempty"`

	// sso type
	SsoType []string `json:"ssoType"`

	// use custom s p metadata
	UseCustomSPMetadata bool `json:"useCustomSPMetadata,omitempty"`

	// user metadata
	UserMetadata *ServiceProvider `json:"userMetadata,omitempty"`

	// user sp signing cert Id
	UserSpSigningCertID int64 `json:"userSpSigningCertId,omitempty"`
}

// Validate validates this idp
func (m *Idp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdminMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdpEntityID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoginURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Idp) validateAdminMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.AdminMetadata) { // not required
		return nil
	}

	if m.AdminMetadata != nil {
		if err := m.AdminMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adminMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adminMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *Idp) validateCertificates(formats strfmt.Registry) error {
	if swag.IsZero(m.Certificates) { // not required
		return nil
	}

	for i := 0; i < len(m.Certificates); i++ {
		if swag.IsZero(m.Certificates[i]) { // not required
			continue
		}

		if m.Certificates[i] != nil {
			if err := m.Certificates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("certificates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("certificates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Idp) validateIdpEntityID(formats strfmt.Registry) error {

	if err := validate.Required("idpEntityId", "body", m.IdpEntityID); err != nil {
		return err
	}

	return nil
}

func (m *Idp) validateLoginURL(formats strfmt.Registry) error {

	if err := validate.Required("loginUrl", "body", m.LoginURL); err != nil {
		return err
	}

	return nil
}

func (m *Idp) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Idp) validateUserMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.UserMetadata) { // not required
		return nil
	}

	if m.UserMetadata != nil {
		if err := m.UserMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userMetadata")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this idp based on the context it is used
func (m *Idp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdminMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCertificates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Idp) contextValidateAdminMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.AdminMetadata != nil {
		if err := m.AdminMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adminMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adminMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *Idp) contextValidateCertificates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Certificates); i++ {

		if m.Certificates[i] != nil {
			if err := m.Certificates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("certificates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("certificates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Idp) contextValidateUserMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.UserMetadata != nil {
		if err := m.UserMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userMetadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Idp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Idp) UnmarshalBinary(b []byte) error {
	var res Idp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
