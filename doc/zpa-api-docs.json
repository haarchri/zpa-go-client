{
  "swagger" : "2.0",
  "info" : {
    "description" : "To access detailed ZPA API documentation, including references and use cases, refer to the [Zscaler Help Portal](https://help.zscaler.com/zpa/publicapi/about-zpa-api)",
    "version" : "1.0",
    "title" : "Zscaler Private Access API Portal"
  },
  "host" : "",
  "basePath" : "",
  "tags" : [ {
    "name" : "app-server-controller",
    "description" : "Server resource endpoints"
  }, {
    "name" : "application-controller",
    "description" : "Application Segment resource endpoints"
  }, {
    "name" : "segment-group-controller",
    "description" : "Segment Group resource endpoints"
  }, {
    "name" : "connector-controller",
    "description" : "Connector resource endpoints"
  }, {
    "name" : "connector-group-controller",
    "description" : "App Connector Group resource endpoints"
  }, {
    "name" : "ba-certificate-controller",
    "description" : "Browser Access certificate related endpoints"
  }, {
    "name" : "ba-certificate-controller-v-2",
    "description" : "Browser Access certificate related v2 endpoints"
  }, {
    "name" : "customer-version-profile-controller",
    "description" : "Customer Version profile resource endpoints"
  }, {
    "name" : "cloud-connector-group-controller",
    "description" : "Cloud Connector Group resource endpoints"
  }, {
    "name" : "idp-controller",
    "description" : "IdP resource endpoints"
  }, {
    "name" : "idp-controller-v-2",
    "description" : "IdP resource v2 endpoints"
  }, {
    "name" : "machine-group-controller",
    "description" : "Machine Group resource endpoints"
  }, {
    "name" : "provisioningKey-controller",
    "description" : "Provisioning key endpoints"
  }, {
    "name" : "policy-set-controller",
    "description" : "ZPA policy endpoints"
  }, {
    "name" : "posture-profile-controller",
    "description" : "Posture profile endpoints"
  }, {
    "name" : "posture-profile-controller-v-2",
    "description" : "Posture profile v2 endpoints"
  }, {
    "name" : "service-edge-controller",
    "description" : "Service Edge resource endpoints"
  }, {
    "name" : "service-edge-group-controller",
    "description" : "Service Edge group resource endpoints"
  }, {
    "name" : "saml-attr-controller",
    "description" : "SAML attribute endpoints"
  }, {
    "name" : "saml-attr-controller-v-2",
    "description" : "SAML attribute v2 endpoints"
  }, {
    "name" : "scim-attribute-header-controller",
    "description" : "SCIM attribute endpoints"
  }, {
    "name" : "server-group-controller",
    "description" : "Server Group endpoints"
  }, {
    "name" : "lss-config-controller-v-2",
    "description" : "LSS V2 endpoints"
  }, {
    "name" : "enrollment-cert-controller",
    "description" : "Signing Certificate related endpoints"
  }, {
    "name" : "enrollment-cert-controller-v-2",
    "description" : "Signing certificate related v2 endpoints"
  }, {
    "name" : "trusted-network-controller",
    "description" : "Trusted Network endpoints"
  }, {
    "name" : "trusted-network-controller-v-2",
    "description" : "Trusted Network v2 endpoints"
  } ],
  "paths" : {
    "/mgmtconfig/v2/admin/lssConfig/clientTypes" : {
      "get" : {
        "tags" : [ "lss-config-controller-v-2" ],
        "summary" : "Get list of all LSS client types.",
        "operationId" : "getListOfLssClientTypesUsingGET_1",
        "produces" : [ "*/*" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              }
            },
            "responseSchema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/connector/bulkDelete" : {
      "post" : {
        "tags" : [ "connector-controller" ],
        "summary" : "Bulk delete the Connectors.",
        "operationId" : "bulkDeleteConnectorUsingPOST_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "bulkDeleteResource",
          "description" : "The resource for bulk deleting the Connectors.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BulkDeleteResource"
          }
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/policySet/bypass" : {
      "get" : {
        "tags" : [ "policy-set-controller" ],
        "summary" : "Get the bypass policy and all rules for a Client Forwarding policy rule. This API will be deprecated in a future release.",
        "operationId" : "getBypassPolicySetUsingGET_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PolicySet"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/PolicySet"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/serviceEdge/{serviceEdgeId}" : {
      "get" : {
        "tags" : [ "service-edge-controller" ],
        "summary" : "Get the Service Edge details.",
        "operationId" : "getServiceEdgeUsingGET_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceEdgeId",
          "in" : "path",
          "description" : "The unique identifier of the Service Edge.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ServiceEdge"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/ServiceEdge"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "service-edge-controller" ],
        "summary" : "Update the Service Edge details.",
        "operationId" : "updateServiceEdgeUsingPUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "serviceEdge",
          "description" : "The object of the Service Edge.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ServiceEdge"
          }
        }, {
          "name" : "serviceEdgeId",
          "in" : "path",
          "description" : "The unique identifier of the Service Edge.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "service-edge-controller" ],
        "summary" : "Delete the Service Edge.",
        "operationId" : "deleteServiceEdgeUsingDELETE",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceEdgeId",
          "in" : "path",
          "description" : "The unique identifier of the Service Edge.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/samlAttribute" : {
      "get" : {
        "tags" : [ "saml-attr-controller" ],
        "summary" : "Get all SAML attributes. This API will be deprecated in a future release.",
        "operationId" : "getAllAttributesUsingGET_4",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/SamlAttribute"
              }
            },
            "responseSchema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/SamlAttribute"
              }
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/connector/{connectorId}" : {
      "get" : {
        "tags" : [ "connector-controller" ],
        "summary" : "Get the Connector details.",
        "operationId" : "getConnectorUsingGET_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "connectorId",
          "in" : "path",
          "description" : "The unique identifier of the Connector.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Connector"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/Connector"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "connector-controller" ],
        "summary" : "Update the Connector details.",
        "operationId" : "updateConnectorUsingPUT_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "connector",
          "description" : "The object of the Connector.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Connector"
          }
        }, {
          "name" : "connectorId",
          "in" : "path",
          "description" : "The unique identifier of the Connector.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "connector-controller" ],
        "summary" : "Delete the Connector.",
        "operationId" : "deleteConnectorUsingDELETE_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "connectorId",
          "in" : "path",
          "description" : "The unique identifier of the Connector.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/policySet/{policySetId}/rule/{ruleId}/reorder/{newOrder}" : {
      "put" : {
        "tags" : [ "policy-set-controller" ],
        "summary" : "Update rule order.",
        "operationId" : "reOrderPolicyRuleUsingPUT_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "newOrder",
          "in" : "path",
          "description" : "The new order of the rule.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "policySetId",
          "in" : "path",
          "description" : "The unique identifier of the policy.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "ruleId",
          "in" : "path",
          "description" : "The unique identifier of a rule in a policy.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/segmentGroup/{segmentGroupId}" : {
      "get" : {
        "tags" : [ "segment-group-controller" ],
        "summary" : "Get the Segment Group details.",
        "operationId" : "getSegmentGroupUsingGET_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "segmentGroupId",
          "in" : "path",
          "description" : "The unique identifier of the Segment Group.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SegmentGroup"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/SegmentGroup"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "segment-group-controller" ],
        "summary" : "Update a Segment Group.",
        "operationId" : "updateSegmentGroupUsingPUT_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "segmentGroup",
          "description" : "The object of the Segment Group.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SegmentGroup"
          }
        }, {
          "name" : "segmentGroupId",
          "in" : "path",
          "description" : "The unique identifier of the Segment Group.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "segment-group-controller" ],
        "summary" : "Delete a Segment Group.",
        "operationId" : "deleteSegmentGroupUsingDELETE_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "segmentGroupId",
          "in" : "path",
          "description" : "The unique identifier of the Segment Group.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/segmentGroup" : {
      "get" : {
        "tags" : [ "segment-group-controller" ],
        "summary" : "Get all the configured Segment Groups.",
        "operationId" : "getAllSegmentGroupsUsingGET_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Specifies the page number.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 1
        }, {
          "name" : "pagesize",
          "in" : "query",
          "description" : "Specifies the page size. If not provided, the default page size is 20. The max page size is 500.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 20
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "The search string used to support search by features and fields for the API.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageListOfSegmentGroup"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/PageListOfSegmentGroup"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "segment-group-controller" ],
        "summary" : "Add a new Segment Group.",
        "operationId" : "addSegmentGroupUsingPOST_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "segmentGroup",
          "description" : "The object of the Segment Group.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SegmentGroup"
          }
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/SegmentGroup"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/SegmentGroup"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/network" : {
      "get" : {
        "tags" : [ "trusted-network-controller" ],
        "summary" : "Get all the Trusted Networks. This API will be deprecated in a future release.",
        "operationId" : "getAllTrustedNetworksUsingGET_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/TrustedNetwork"
              }
            },
            "responseSchema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/TrustedNetwork"
              }
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/policySet/policyType/{policyType}" : {
      "get" : {
        "tags" : [ "policy-set-controller" ],
        "summary" : "For a customer, get policy set by policy type",
        "operationId" : "getPolicySetByPolicyTypeUsingGET_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "customerId",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "policyType",
          "in" : "path",
          "description" : "Type for differentiating policy types. Supported values : ACCESS_POLICY/GLOBAL_POLICY, TIMEOUT_POLICY/REAUTH_POLICY, SIEM_POLICY, CLIENT_FORWARDING_POLICY/BYPASS_POLICY",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PolicySet"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/PolicySet"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/server" : {
      "get" : {
        "tags" : [ "app-server-controller" ],
        "summary" : "Get all the configured Servers.",
        "operationId" : "getAllAppServersUsingGET_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Specifies the page number.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 1
        }, {
          "name" : "pagesize",
          "in" : "query",
          "description" : "Specifies the page size. If not provided, the default page size is 20. The max page size is 500.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 20
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "The search string used to support search by features and fields for the API.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageListOfApplicationServer"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/PageListOfApplicationServer"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "app-server-controller" ],
        "summary" : "Add a new Server.",
        "operationId" : "addAppServerUsingPOST_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "server",
          "description" : "The object of the Server.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ApplicationServer"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/ApplicationServer"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/ApplicationServer"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/application" : {
      "get" : {
        "tags" : [ "application-controller" ],
        "summary" : "Get all configured Application Segments.",
        "operationId" : "getAllApplicationsUsingGET_3",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Specifies the page number.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 1
        }, {
          "name" : "pagesize",
          "in" : "query",
          "description" : "Specifies the page size. If not provided, the default page size is 20. The max page size is 500.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 20
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "The search string used to support search by features and fields for the API.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageListOfApplicationResource"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/PageListOfApplicationResource"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "application-controller" ],
        "summary" : "Add a new Application Segment.",
        "operationId" : "addApplicationUsingPOST_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "application",
          "description" : "The object of the Application Segment.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ApplicationResource"
          }
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/ApplicationResource"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/ApplicationResource"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v2/admin/customers/{customerId}/samlAttribute/idp/{idpId}" : {
      "get" : {
        "tags" : [ "saml-attr-controller-v-2" ],
        "summary" : "Get all attributes configured for a given customer",
        "operationId" : "getAllAttributesByIdpIdAndPageUsingGET",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "idpId",
          "in" : "path",
          "description" : "The unique identifier of the IdP.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Specifies the page number.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 1
        }, {
          "name" : "pagesize",
          "in" : "query",
          "description" : "Specifies the page size. If not provided, the default page size is 20. The max page size is 500.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 20
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "The search string used to support search by features and fields for the API.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageListOfSamlAttribute"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/PageListOfSamlAttribute"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v2/admin/customers/{customerId}/lssConfig/{lssId}" : {
      "get" : {
        "tags" : [ "lss-config-controller-v-2" ],
        "summary" : "Get the LSS details",
        "operationId" : "getLssUsingGET_3",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "lssId",
          "in" : "path",
          "description" : "The unique identifier of the LSS resource.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/LssResource"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/LssResource"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "lss-config-controller-v-2" ],
        "summary" : "Update a LSS Attribute.",
        "operationId" : "updateLssUsingPUT_3",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "lssId",
          "in" : "path",
          "description" : "The unique identifier of the LSS resource.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "lssResource",
          "description" : "The object of the LSS Resource.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/LssResource"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "lss-config-controller-v-2" ],
        "summary" : "Delete a LSS attribute.",
        "operationId" : "deleteLssUsingDELETE_3",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "lssId",
          "in" : "path",
          "description" : "The unique identifier of the LSS resource.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/idp/{idpId}/scimattribute" : {
      "get" : {
        "tags" : [ "scim-attribute-header-controller" ],
        "summary" : "Get all the SCIM attributes.",
        "operationId" : "getAllSCIMAttributesUsingGET_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "idpId",
          "in" : "path",
          "description" : "The unique identifier of the IdP.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Specifies the page number.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 1
        }, {
          "name" : "pagesize",
          "in" : "query",
          "description" : "Specifies the page size. If not provided, the default page size is 20. The max page size is 500.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 20
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "The search string used to support search by features and fields for the API.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageListOfSCIMAttributeHeader"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/PageListOfSCIMAttributeHeader"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/serverGroup" : {
      "get" : {
        "tags" : [ "server-group-controller" ],
        "summary" : "Get all configured Server Groups.",
        "operationId" : "getAllServerGroupsUsingGET_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Specifies the page number.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 1
        }, {
          "name" : "pagesize",
          "in" : "query",
          "description" : "Specifies the page size. If not provided, the default page size is 20. The max page size is 500.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 20
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "The search string used to support search by features and fields for the API.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageListOfServerGroupDTO"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/PageListOfServerGroupDTO"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "server-group-controller" ],
        "summary" : "Add a new Server Group.",
        "operationId" : "addAppServerGroupUsingPOST_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "group",
          "description" : "The object of the Server Group.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ServerGroupDTO"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/ServerGroupDTO"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/ServerGroupDTO"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/policySet/{policySetId}/rule" : {
      "post" : {
        "tags" : [ "policy-set-controller" ],
        "summary" : "Add a new policy rule for a given policy.",
        "operationId" : "addRuleToPolicySetUsingPOST_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "policySetId",
          "in" : "path",
          "description" : "The unique identifier of the policy.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "rule",
          "description" : "The object of the policy rule.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PolicyRule"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/PolicyRule"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/PolicyRule"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/clientlessCertificate/issued" : {
      "get" : {
        "tags" : [ "ba-certificate-controller" ],
        "summary" : "Get all the issued certificates. This API will be deprecated in a future release.",
        "operationId" : "getAllIssuedCertsUsingGET_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/BACertificate"
              }
            },
            "responseSchema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/BACertificate"
              }
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/clientlessCertificate/{certificateId}" : {
      "get" : {
        "tags" : [ "ba-certificate-controller" ],
        "summary" : "Get the details of the Browser Access certificate.",
        "operationId" : "getUsingGET_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "certificateId",
          "in" : "path",
          "description" : "The unique identifier of the Browser Access certificate.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/BACertificate"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/BACertificate"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v2/admin/customers/{customerId}/enrollmentCert" : {
      "get" : {
        "tags" : [ "enrollment-cert-controller-v-2" ],
        "summary" : "Get all the configured Enrollment Cert details.",
        "operationId" : "getAllSigningCertUsingGET_2",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Specifies the page number.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 1
        }, {
          "name" : "pagesize",
          "in" : "query",
          "description" : "Specifies the page size. If not provided, the default page size is 20. The max page size is 500.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 20
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "The search string used to support search by features and fields for the API.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageListOfEnrollmentCert"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/PageListOfEnrollmentCert"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/machineGroup/{Id}" : {
      "get" : {
        "tags" : [ "machine-group-controller" ],
        "summary" : "Get the Machine Group details.",
        "operationId" : "getMachineGroupUsingGET",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "Id",
          "in" : "path",
          "description" : "The unique identifier of the Machine Group.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/MachineGroup"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/MachineGroup"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/serverGroup/{groupId}" : {
      "get" : {
        "tags" : [ "server-group-controller" ],
        "summary" : "Get the Server Group details.",
        "operationId" : "getServerGroupUsingGET_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "groupId",
          "in" : "path",
          "description" : "The unique identifier of the Segment Group.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ServerGroupDTO"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/ServerGroupDTO"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "server-group-controller" ],
        "summary" : "Update the Server Group.",
        "operationId" : "updateAppServerGroupUsingPUT_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "group",
          "description" : "The object of the Server Group.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ServerGroupDTO"
          }
        }, {
          "name" : "groupId",
          "in" : "path",
          "description" : "The unique identifier of the Server Group.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "server-group-controller" ],
        "summary" : "Delete a Server Group.",
        "operationId" : "deleteAppServerGroupUsingDELETE_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "groupId",
          "in" : "path",
          "description" : "The unique identifier of the Server Group.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/serviceEdge" : {
      "get" : {
        "tags" : [ "service-edge-controller" ],
        "summary" : "Get all the configured Service Edge details.",
        "operationId" : "getAllServiceEdgesUsingGET",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Specifies the page number.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 1
        }, {
          "name" : "pagesize",
          "in" : "query",
          "description" : "Specifies the page size. If not provided, the default page size is 20. The max page size is 500.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 20
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "The search string used to support search by features and fields for the API.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageListOfServiceEdge"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/PageListOfServiceEdge"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/posture" : {
      "get" : {
        "tags" : [ "posture-profile-controller" ],
        "summary" : "Get all posture profiles. This API will be deprecated in a future release.",
        "operationId" : "getAllAttributesUsingGET_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/PostureProfile"
              }
            },
            "responseSchema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/PostureProfile"
              }
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v2/admin/customers/{customerId}/clientlessCertificate/issued" : {
      "get" : {
        "tags" : [ "ba-certificate-controller-v-2" ],
        "summary" : "Get all the issued certificates.",
        "operationId" : "getAllIssuedCertsUsingGET_2",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Specifies the page number.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 1
        }, {
          "name" : "pagesize",
          "in" : "query",
          "description" : "Specifies the page size. If not provided, the default page size is 20. The max page size is 500.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 20
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "The search string used to support search by features and fields for the API.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageListOfBACertificate"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/PageListOfBACertificate"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/idp" : {
      "get" : {
        "tags" : [ "idp-controller" ],
        "summary" : "Get the configured IdP details. This API will be deprecated in a future release.",
        "operationId" : "getIdpUsingGET_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "scimEnabled",
          "in" : "query",
          "description" : "Returns all SCIM IdPs if set to true. Returns all non SCIM IdPs if set to false.",
          "required" : false,
          "type" : "boolean",
          "allowEmptyValue" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Idp"
              }
            },
            "responseSchema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Idp"
              }
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v2/admin/customers/{customerId}/samlAttribute" : {
      "get" : {
        "tags" : [ "saml-attr-controller-v-2" ],
        "summary" : "Get all SAML attributes by page.",
        "operationId" : "getAllAttributesByPageUsingGET",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Specifies the page number.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 1
        }, {
          "name" : "pagesize",
          "in" : "query",
          "description" : "Specifies the page size. If not provided, the default page size is 20. The max page size is 500.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 20
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "The search string used to support search by features and fields for the API.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageListOfSamlAttribute"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/PageListOfSamlAttribute"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/associationType/{associationType}/provisioningKey" : {
      "get" : {
        "tags" : [ "provisioningKey-controller" ],
        "summary" : "Get all the configured Provisioning Key details.",
        "operationId" : "getProvisioningKeyForAssociationTypeUsingGET_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "associationType",
          "in" : "path",
          "description" : "Specifies the provisioning key type for App Connectors or ZPA Private Service Edges. The supported values are CONNECTOR_GRP and SERVICE_EDGE_GRP.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Specifies the page number.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 1
        }, {
          "name" : "pagesize",
          "in" : "query",
          "description" : "Specifies the page size. If not provided, the default page size is 20. The max page size is 500.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 20
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "The search string used to support search by features and fields for the API.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageListOfProvisioningKey"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/PageListOfProvisioningKey"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "provisioningKey-controller" ],
        "summary" : "Add a new Provisioning Key.",
        "operationId" : "createProvisioningKeyUsingPOST_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "associationType",
          "in" : "path",
          "description" : "Specifies the provisioning key type for App Connectors or ZPA Private Service Edges. The supported values are CONNECTOR_GRP and SERVICE_EDGE_GRP.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "provisioningKey",
          "description" : "The object of the Provisioning Key.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Provisioning Key"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Provisioning Key"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/Provisioning Key"
            }
          },
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/associationType/{associationType}/provisioningKey/{provisioningKeyId}" : {
      "get" : {
        "tags" : [ "provisioningKey-controller" ],
        "summary" : "Get the Provisioning Key details.",
        "operationId" : "getProvisioningKeyUsingGET_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "associationType",
          "in" : "path",
          "description" : "Specifies the provisioning key type for App Connectors or ZPA Private Service Edges. The supported values are CONNECTOR_GRP and SERVICE_EDGE_GRP.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "provisioningKeyId",
          "in" : "path",
          "description" : "The unique identifier of the Provisioning Key.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Provisioning Key"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/Provisioning Key"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "provisioningKey-controller" ],
        "summary" : "Update the Provisioning Key details.",
        "operationId" : "updateProvisioningKeyUsingPUT_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "associationType",
          "in" : "path",
          "description" : "Specifies the provisioning key type for App Connectors or ZPA Private Service Edges. The supported values are CONNECTOR_GRP and SERVICE_EDGE_GRP.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "provisioningKey",
          "description" : "The object of the Provisioning Key.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Provisioning Key"
          }
        }, {
          "name" : "provisioningKeyId",
          "in" : "path",
          "description" : "The unique identifier of the Provisioning Key.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "provisioningKey-controller" ],
        "summary" : "Delete the Provisioning Key.",
        "operationId" : "deleteProvisioningKeyUsingDELETE_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "associationType",
          "in" : "path",
          "description" : "Specifies the provisioning key type for App Connectors or ZPA Private Service Edges. The supported values are CONNECTOR_GRP and SERVICE_EDGE_GRP.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "provisioningKeyId",
          "in" : "path",
          "description" : "The unique identifier of the Provisioning Key.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/policySet/rules/policyType/{policyType}" : {
      "get" : {
        "tags" : [ "policy-set-controller" ],
        "summary" : "Get paginated policy rules for a given policy type.",
        "operationId" : "getPolicyRulesByPageUsingGET_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Specifies the page number.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 1
        }, {
          "name" : "pagesize",
          "in" : "query",
          "description" : "Specifies the page size. If not provided, the default page size is 20. The max page size is 500.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 20
        }, {
          "name" : "policyType",
          "in" : "path",
          "description" : "Type for differentiating policy types. Supported values : ACCESS_POLICY/GLOBAL_POLICY, TIMEOUT_POLICY/REAUTH_POLICY, SIEM_POLICY, CLIENT_FORWARDING_POLICY/BYPASS_POLICY",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "The search string used to support search by features and fields for the API.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageListOfPolicyRule"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/PageListOfPolicyRule"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v2/admin/customers/{customerId}/posture" : {
      "get" : {
        "tags" : [ "posture-profile-controller-v-2" ],
        "summary" : "Get all posture profiles.",
        "operationId" : "getAllAttributesUsingGET_2",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Specifies the page number.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 1
        }, {
          "name" : "pagesize",
          "in" : "query",
          "description" : "Specifies the page size. If not provided, the default page size is 20. The max page size is 500.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 20
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "The search string used to support search by features and fields for the API.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageListOfPostureProfile"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/PageListOfPostureProfile"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/application/{applicationId}" : {
      "get" : {
        "tags" : [ "application-controller" ],
        "summary" : "Get the Application Segment details.",
        "operationId" : "getApplicationUsingGET_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "applicationId",
          "in" : "path",
          "description" : "The unique identifier of the Application Segment.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ApplicationResource"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/ApplicationResource"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "application-controller" ],
        "summary" : "Update the Application Segment details.",
        "operationId" : "updateApplicationV2UsingPUT_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "application",
          "description" : "The object of the Application Segment.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ApplicationResource"
          }
        }, {
          "name" : "applicationId",
          "in" : "path",
          "description" : "The unique identifier of the Application Segment.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "application-controller" ],
        "summary" : "Delete an Application Segment.",
        "operationId" : "deleteApplicationUsingDELETE_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "applicationId",
          "in" : "path",
          "description" : "The unique identifier of the Application Segment.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "forceDelete",
          "in" : "query",
          "description" : "Setting this field to true will delete the mapping between Application Segment and Segment Group",
          "required" : false,
          "type" : "boolean",
          "default" : false,
          "allowEmptyValue" : false
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/policySet/global" : {
      "get" : {
        "tags" : [ "policy-set-controller" ],
        "summary" : "Get the global policy. This API will be deprecated in a future release.",
        "operationId" : "getGlobalPolicySetUsingGET_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PolicySet"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/PolicySet"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/connector" : {
      "get" : {
        "tags" : [ "connector-controller" ],
        "summary" : "Get all the configured Connector details.",
        "operationId" : "getAllConnectorsUsingGET_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Specifies the page number.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 1
        }, {
          "name" : "pagesize",
          "in" : "query",
          "description" : "Specifies the page size. If not provided, the default page size is 20. The max page size is 500.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 20
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "The search string used to support search by features and fields for the API.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageListOfConnector"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/PageListOfConnector"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/posture/{id}" : {
      "get" : {
        "tags" : [ "posture-profile-controller" ],
        "summary" : "Get the configured profile posture.",
        "operationId" : "getPostureProfileUsingGET_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the posture profile.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PostureProfile"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/PostureProfile"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/policySet/reauth" : {
      "get" : {
        "tags" : [ "policy-set-controller" ],
        "summary" : "Get the authentication policy and all rules for a Timeout policy rule. This API will be deprecated in a future release.",
        "operationId" : "getReauthPolicySetUsingGET_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PolicySet"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/PolicySet"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v2/admin/customers/{customerId}/idp" : {
      "get" : {
        "tags" : [ "idp-controller-v-2" ],
        "summary" : "Get the configured IdP details.",
        "operationId" : "getAllIdpUsingGET",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Specifies the page number.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 1
        }, {
          "name" : "pagesize",
          "in" : "query",
          "description" : "Specifies the page size. If not provided, the default page size is 20. The max page size is 500.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 20
        }, {
          "name" : "scimEnabled",
          "in" : "query",
          "description" : "Returns all SCIM IdPs if set to true. Returns all non SCIM IdPs if set to false.",
          "required" : false,
          "type" : "boolean",
          "allowEmptyValue" : true
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "The search string used to support search by features and fields for the API.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageListOfIdp"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/PageListOfIdp"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v2/admin/customers/{customerId}/lssConfig" : {
      "get" : {
        "tags" : [ "lss-config-controller-v-2" ],
        "summary" : "Get all LSS configured for a given customer",
        "operationId" : "getAllUsingGET_8",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Specifies the page number.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 1
        }, {
          "name" : "pagesize",
          "in" : "query",
          "description" : "Specifies the page size. If not provided, the default page size is 20. The max page size is 500.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 20
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "The search string used to support search by features and fields for the API.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageListOfLssResource"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/PageListOfLssResource"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "lss-config-controller-v-2" ],
        "summary" : "Add a new LSS for a given customer.",
        "operationId" : "addLssUsingPOST_3",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "lssResource",
          "description" : "The object of the LSS resource.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/LssResource"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/LssResource"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/LssResource"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/samlAttribute/{attrId}" : {
      "get" : {
        "tags" : [ "saml-attr-controller" ],
        "summary" : "Get the SAML attribute details.",
        "operationId" : "getSamlAttributeUsingGET_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "attrId",
          "in" : "path",
          "description" : "The unique identifier of the SAML attribute.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SamlAttribute"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/SamlAttribute"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/idp/{idpId}" : {
      "get" : {
        "tags" : [ "idp-controller" ],
        "summary" : "Get all the IdP details.",
        "operationId" : "getIdpByIdUsingGET_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "idpId",
          "in" : "path",
          "description" : "The unique identifier of the IdP.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Idp"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/Idp"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/policySet/{policySetId}/rule/{ruleId}" : {
      "get" : {
        "tags" : [ "policy-set-controller" ],
        "summary" : "Get a rule in a policy.",
        "operationId" : "getRuleInPolicySetUsingGET_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "policySetId",
          "in" : "path",
          "description" : "The unique identifier of the policy.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "ruleId",
          "in" : "path",
          "description" : "The unique identifier of a rule in a policy.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PolicyRule"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/PolicyRule"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "policy-set-controller" ],
        "summary" : "Update a rule in a policy.",
        "operationId" : "updateRuleToPolicySetUsingPUT_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "policySetId",
          "in" : "path",
          "description" : "The unique identifier of the policy.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "rule",
          "description" : "The object of the rule in a policy.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PolicyRule"
          }
        }, {
          "name" : "ruleId",
          "in" : "path",
          "description" : "The unique identifier of a rule in a policy.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "policy-set-controller" ],
        "summary" : "Delete a rule in a policy.",
        "operationId" : "deleteRuleInPolicySetUsingDELETE_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "policySetId",
          "in" : "path",
          "description" : "The unique identifier of the policy.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "ruleId",
          "in" : "path",
          "description" : "The unique identifier of a rule in a policy.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v2/admin/customers/{customerId}/network" : {
      "get" : {
        "tags" : [ "trusted-network-controller-v-2" ],
        "summary" : "Get all the Trusted Networks.",
        "operationId" : "getAllTrustedNetworksUsingGET_2",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Specifies the page number.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 1
        }, {
          "name" : "pagesize",
          "in" : "query",
          "description" : "Specifies the page size. If not provided, the default page size is 20. The max page size is 500.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 20
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "The search string used to support search by features and fields for the API.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageListOfTrustedNetwork"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/PageListOfTrustedNetwork"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/appConnectorGroup/{appConnectorGroupId}" : {
      "get" : {
        "tags" : [ "connector-group-controller" ],
        "summary" : "Get the App Connector Group details.",
        "operationId" : "getAppConnectorGroupUsingGET_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "appConnectorGroupId",
          "in" : "path",
          "description" : "The unique identifier of the Connector Group.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AppConnectorGroup"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/AppConnectorGroup"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "connector-group-controller" ],
        "summary" : "Update the Connector Group details.",
        "operationId" : "updateAppConnectorGroupUsingPUT_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "appConnectorGroup",
          "description" : "The object of the Connector Group.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AppConnectorGroup"
          }
        }, {
          "name" : "appConnectorGroupId",
          "in" : "path",
          "description" : "The unique identifier of the Connector Group.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "connector-group-controller" ],
        "summary" : "Delete the Connector Group.",
        "operationId" : "deleteAppConnectorGroupUsingDELETE_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "appConnectorGroupId",
          "in" : "path",
          "description" : "The unique identifier of the Connector Group.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/idp/{idpId}/scimattribute/{scimAttributeId}" : {
      "get" : {
        "tags" : [ "scim-attribute-header-controller" ],
        "summary" : "Get the SCIM attribute details.",
        "operationId" : "getSCIMAttributeUsingGET_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "idpId",
          "in" : "path",
          "description" : "The unique identifier of the IdP.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "scimAttributeId",
          "in" : "path",
          "description" : "The unique identifier of the SCIM attribute.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SCIMAttributeHeader"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/SCIMAttributeHeader"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v2/admin/lssConfig/statusCodes" : {
      "get" : {
        "tags" : [ "lss-config-controller-v-2" ],
        "summary" : "Get list of LSS status codes.",
        "operationId" : "getStatusCodesUsingGET_1",
        "produces" : [ "*/*" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object",
                "properties" : { }
              }
            },
            "responseSchema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object",
                "properties" : { }
              }
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/network/{id}" : {
      "get" : {
        "tags" : [ "trusted-network-controller" ],
        "summary" : "Get the Trusted Networks.",
        "operationId" : "getTrustedNetworkUsingGET_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the Trusted Network.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/TrustedNetwork"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/TrustedNetwork"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/machineGroup" : {
      "get" : {
        "tags" : [ "machine-group-controller" ],
        "summary" : "Get all the configured Machine Groups.",
        "operationId" : "getMachineGroupsUsingGET",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Specifies the page number.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 1
        }, {
          "name" : "pagesize",
          "in" : "query",
          "description" : "Specifies the page size. If not provided, the default page size is 20. The max page size is 500.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 20
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "The search string used to support search by features and fields for the API.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageListOfMachineGroup"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/PageListOfMachineGroup"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v2/admin/lssConfig/logType/formats" : {
      "get" : {
        "tags" : [ "lss-config-controller-v-2" ],
        "summary" : "Get all LSS log format.",
        "operationId" : "getLssLogFormatUsingGET_3",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "logType",
          "in" : "query",
          "description" : "Supported Log type values are : zpn_trans_log, zpn_auth_log, zpn_ast_auth_log, zpn_http_trans_log, zpn_audit_log.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object",
                "properties" : { }
              }
            },
            "responseSchema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object",
                "properties" : { }
              }
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/serviceEdge/bulkDelete" : {
      "post" : {
        "tags" : [ "service-edge-controller" ],
        "summary" : "Bulk delete the Service Edges.",
        "operationId" : "bulkDeleteServiceEdgeUsingPOST",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "bulkDeleteResource",
          "description" : "The resource for bulk deleting the Service Edges.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BulkDeleteResource"
          }
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/server/{serverId}" : {
      "get" : {
        "tags" : [ "app-server-controller" ],
        "summary" : "Get the Server details.",
        "operationId" : "getAppServerUsingGET_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serverId",
          "in" : "path",
          "description" : "The unique identifier of the Server.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ApplicationServer"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/ApplicationServer"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "app-server-controller" ],
        "summary" : "Update the Server details.",
        "operationId" : "updateAppServerUsingPUT_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "server",
          "description" : "The object of the Server.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ApplicationServer"
          }
        }, {
          "name" : "serverId",
          "in" : "path",
          "description" : "The unique identifier of the Server.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "app-server-controller" ],
        "summary" : "Delete a Server.",
        "operationId" : "deleteAppServerUsingDELETE_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serverId",
          "in" : "path",
          "description" : "The unique identifier of the Server.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/appConnectorGroup" : {
      "get" : {
        "tags" : [ "connector-group-controller" ],
        "summary" : "Get all configured App Connector Groups.",
        "operationId" : "getAppConnectorGroupsUsingGET_1",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Specifies the page number.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 1
        }, {
          "name" : "pagesize",
          "in" : "query",
          "description" : "Specifies the page size. If not provided, the default page size is 20. The max page size is 500.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 20
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "The search string used to support search by features and fields for the API.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageListOfAppConnectorGroup"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/PageListOfAppConnectorGroup"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "connector-group-controller" ],
        "summary" : "Add a new Connector Group.",
        "operationId" : "addAppConnectorGroupUsingPOST_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "appConnectorGroup",
          "description" : "The object of the Connector Group.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AppConnectorGroup"
          }
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/AppConnectorGroup"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/AppConnectorGroup"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/serviceEdgeGroup/{serviceEdgeGroupId}" : {
      "get" : {
        "tags" : [ "service-edge-group-controller" ],
        "summary" : "Get the Service Edge Group details.",
        "operationId" : "getServiceEdgeGroupUsingGET",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceEdgeGroupId",
          "in" : "path",
          "description" : "The unique identifier of the Service Edge Group.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ServiceEdgeGroup"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/ServiceEdgeGroup"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "service-edge-group-controller" ],
        "summary" : "Update the Service Edge Group details.",
        "operationId" : "updateServiceEdgeGroupUsingPUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "serviceEdgeGroup",
          "description" : "The object of the Service Edge Group.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ServiceEdgeGroup"
          }
        }, {
          "name" : "serviceEdgeGroupId",
          "in" : "path",
          "description" : "The unique identifier of the Service Edge Group.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "service-edge-group-controller" ],
        "summary" : "Delete the Service Edge Group.",
        "operationId" : "deleteServiceEdgeGroupUsingDELETE",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceEdgeGroupId",
          "in" : "path",
          "description" : "The unique identifier of the Service Edge Group.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/cloudConnectorGroup/{id}" : {
      "get" : {
        "tags" : [ "cloud-connector-group-controller" ],
        "summary" : "Get the Cloud Connector Group details.",
        "operationId" : "getCloudConnectorGroupUsingGET",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the Cloud Connector Group.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/CloudConnectorGroupResource"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/CloudConnectorGroupResource"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/visible/versionProfiles" : {
      "get" : {
        "tags" : [ "customer-version-profile-controller" ],
        "summary" : "Get Version Profiles visible to a customer",
        "operationId" : "getAllVersionProfilesVisibileByCustomerIdUsingGET",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Specifies the page number.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 1
        }, {
          "name" : "pagesize",
          "in" : "query",
          "description" : "Specifies the page size. If not provided, the default page size is 20. The max page size is 500.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 20
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "The search string used to support search by features and fields for the API.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageListOfVersionProfile"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/PageListOfVersionProfile"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/cloudConnectorGroup" : {
      "get" : {
        "tags" : [ "cloud-connector-group-controller" ],
        "summary" : "Get all configured Cloud Connector Groups.",
        "operationId" : "getCloudConnectorGroupsUsingGET",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Specifies the page number.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 1
        }, {
          "name" : "pagesize",
          "in" : "query",
          "description" : "Specifies the page size. If not provided, the default page size is 20. The max page size is 500.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 20
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "The search string used to support search by features and fields for the API.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageListOfCloudConnectorGroupResource"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/PageListOfCloudConnectorGroupResource"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/serviceEdgeGroup" : {
      "get" : {
        "tags" : [ "service-edge-group-controller" ],
        "summary" : "Get all the configured Service Edge Group details.",
        "operationId" : "getServiceEdgeGroupsUsingGET",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Specifies the page number.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 1
        }, {
          "name" : "pagesize",
          "in" : "query",
          "description" : "Specifies the page size. If not provided, the default page size is 20. The max page size is 500.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "x-example" : 20
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "The search string used to support search by features and fields for the API.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PageListOfServiceEdgeGroup"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/PageListOfServiceEdgeGroup"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "service-edge-group-controller" ],
        "summary" : "Add a new Service Edge Group.",
        "operationId" : "addServiceEdgeGroupUsingPOST",
        "consumes" : [ "application/json" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "serviceEdgeGroup",
          "description" : "The object of the Service Edge Group.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ServiceEdgeGroup"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/ServiceEdgeGroup"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/ServiceEdgeGroup"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    },
    "/mgmtconfig/v1/admin/customers/{customerId}/enrollmentCert/{enrollmentCertId}" : {
      "get" : {
        "tags" : [ "enrollment-cert-controller" ],
        "summary" : "Get the Enrollment Cert details.",
        "operationId" : "getEnrollmentCertUsingGET_3",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The unique identifier of the ZPA tenant.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "enrollmentCertId",
          "in" : "path",
          "description" : "The unique identifier of the Enrollment Cert.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/EnrollmentCert"
            },
            "responseSchema" : {
              "$ref" : "#/definitions/EnrollmentCert"
            }
          },
          "400" : {
            "description" : "BadRequest"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "429" : {
            "description" : "TooManyRequest"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "deprecated" : false
      }
    }
  },
  "definitions" : {
    "AppConnectorGroup" : {
      "required" : [ "name" ],
      "properties" : {
        "connectors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Connector"
          }
        },
        "cityCountry" : {
          "type" : "string"
        },
        "countryCode" : {
          "type" : "string"
        },
        "creationTime" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "dnsQueryType" : {
          "type" : "string",
          "enum" : [ "IPV4_IPV6", "IPV4", "IPV6" ]
        },
        "enabled" : {
          "type" : "boolean"
        },
        "geoLocationId" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "latitude" : {
          "type" : "string"
        },
        "location" : {
          "type" : "string"
        },
        "longitude" : {
          "type" : "string"
        },
        "modifiedBy" : {
          "type" : "string"
        },
        "modifiedTime" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "overrideVersionProfile" : {
          "type" : "boolean"
        },
        "serverGroups" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AppServerGroup"
          }
        },
        "lssAppConnectorGroup" : {
          "type" : "boolean"
        },
        "upgradeDay" : {
          "type" : "string"
        },
        "upgradeTimeInSecs" : {
          "type" : "string"
        },
        "versionProfileId" : {
          "type" : "string"
        },
        "versionProfileName" : {
          "type" : "string",
          "description" : "Only applicable for a GET request. Ignored in PUT/POST/DELETE requests."
        },
        "versionProfileVisibilityScope" : {
          "type" : "string",
          "description" : "Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.",
          "enum" : [ "ALL", "NONE", "CUSTOM" ]
        }
      }
    },
    "AppConnectorGroupResource" : {
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "AppPortRange" : {
      "properties" : {
        "from" : {
          "type" : "string"
        },
        "to" : {
          "type" : "string"
        }
      }
    },
    "AppServerGroup" : {
      "required" : [ "name" ],
      "properties" : {
        "configSpace" : {
          "type" : "string",
          "enum" : [ "DEFAULT", "SIEM" ]
        },
        "creationTime" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "enabled" : {
          "type" : "boolean"
        },
        "id" : {
          "type" : "string"
        },
        "dynamicDiscovery" : {
          "type" : "boolean"
        },
        "modifiedBy" : {
          "type" : "string"
        },
        "modifiedTime" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "AppServerGroupResource" : {
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "Application" : {
      "required" : [ "name" ],
      "properties" : {
        "bypassType" : {
          "type" : "string",
          "enum" : [ "ALWAYS", "NEVER", "ON_NET" ]
        },
        "configSpace" : {
          "type" : "string",
          "enum" : [ "DEFAULT", "SIEM" ]
        },
        "creationTime" : {
          "type" : "string"
        },
        "defaultIdleTimeout" : {
          "type" : "string"
        },
        "defaultMaxAge" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "domainName" : {
          "type" : "string"
        },
        "domainNames" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "doubleEncrypt" : {
          "type" : "boolean"
        },
        "enabled" : {
          "type" : "boolean"
        },
        "healthCheckType" : {
          "type" : "string",
          "enum" : [ "DEFAULT", "NONE" ]
        },
        "icmpAccessType" : {
          "type" : "string",
          "enum" : [ "PING_TRACEROUTING", "PING", "NONE" ]
        },
        "id" : {
          "type" : "string"
        },
        "ipAnchored" : {
          "type" : "boolean"
        },
        "logFeatures" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "skip_discovery", "full_wildcard" ]
          }
        },
        "modifiedBy" : {
          "type" : "string"
        },
        "modifiedTime" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "passiveHealthEnabled" : {
          "type" : "boolean"
        },
        "serverGroups" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AppServerGroup"
          }
        },
        "tcpPortRange" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AppPortRange"
          }
        },
        "tcpPortRanges" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "tcpPortsIn" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "tcpPortsOut" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "udpPortRange" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AppPortRange"
          }
        },
        "udpPortRanges" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ApplicationResource" : {
      "properties" : {
        "segmentGroupId" : {
          "type" : "string"
        },
        "segmentGroupName" : {
          "type" : "string"
        },
        "bypassType" : {
          "type" : "string",
          "enum" : [ "ALWAYS", "NEVER", "ON_NET" ]
        },
        "clientlessApps" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/BAAppDto"
          }
        },
        "commonAppsDto" : {
          "$ref" : "#/definitions/CommonApplicationDto"
        },
        "configSpace" : {
          "type" : "string",
          "enum" : [ "DEFAULT", "SIEM" ]
        },
        "creationTime" : {
          "type" : "string",
          "description" : "Only applicable for a GET request. Ignored in PUT/POST/DELETE requests."
        },
        "defaultIdleTimeout" : {
          "type" : "string"
        },
        "defaultMaxAge" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "domainNames" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "doubleEncrypt" : {
          "type" : "boolean"
        },
        "enabled" : {
          "type" : "boolean"
        },
        "healthCheckType" : {
          "type" : "string",
          "enum" : [ "DEFAULT", "NONE" ]
        },
        "healthReporting" : {
          "type" : "string",
          "enum" : [ "NONE", "ON_ACCESS", "CONTINUOUS" ]
        },
        "icmpAccessType" : {
          "type" : "string",
          "enum" : [ "PING_TRACEROUTING", "PING", "NONE" ]
        },
        "id" : {
          "type" : "string",
          "description" : "Only applicable for a GET request. Ignored in PUT/POST/DELETE requests."
        },
        "inspectionApps" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InspectAppDto"
          }
        },
        "ipAnchored" : {
          "type" : "boolean"
        },
        "isCnameEnabled" : {
          "type" : "boolean"
        },
        "modifiedBy" : {
          "type" : "string",
          "description" : "Only applicable for a GET request. Ignored in PUT/POST/DELETE requests."
        },
        "modifiedTime" : {
          "type" : "string",
          "description" : "Only applicable for a GET request. Ignored in PUT/POST/DELETE requests."
        },
        "name" : {
          "type" : "string"
        },
        "passiveHealthEnabled" : {
          "type" : "boolean"
        },
        "serverGroups" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AppServerGroup"
          }
        },
        "tcpPortRange" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AppPortRange"
          }
        },
        "tcpPortRanges" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "udpPortRange" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AppPortRange"
          }
        },
        "udpPortRanges" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ApplicationServer" : {
      "required" : [ "name" ],
      "properties" : {
        "address" : {
          "type" : "string"
        },
        "appServerGroupIds" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "configSpace" : {
          "type" : "string",
          "enum" : [ "DEFAULT", "SIEM" ]
        },
        "creationTime" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "enabled" : {
          "type" : "boolean"
        },
        "id" : {
          "type" : "string"
        },
        "modifiedBy" : {
          "type" : "string"
        },
        "modifiedTime" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "BAAppDto" : {
      "properties" : {
        "allowOptions" : {
          "type" : "boolean"
        },
        "appId" : {
          "type" : "string"
        },
        "applicationPort" : {
          "type" : "string"
        },
        "applicationProtocol" : {
          "type" : "string",
          "enum" : [ "HTTP", "HTTPS", "FTP", "RDP" ]
        },
        "certificateId" : {
          "type" : "string"
        },
        "certificateName" : {
          "type" : "string"
        },
        "cname" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "domain" : {
          "type" : "string"
        },
        "enabled" : {
          "type" : "boolean"
        },
        "hidden" : {
          "type" : "boolean"
        },
        "id" : {
          "type" : "string"
        },
        "localDomain" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "path" : {
          "type" : "string"
        },
        "portal" : {
          "type" : "boolean"
        },
        "trustUntrustedCert" : {
          "type" : "boolean"
        }
      }
    },
    "BACertificate" : {
      "required" : [ "certificate", "name" ],
      "properties" : {
        "cName" : {
          "type" : "string"
        },
        "certChain" : {
          "type" : "string"
        },
        "certificate" : {
          "type" : "string",
          "description" : "The certificate text is in PEM format."
        },
        "creationTime" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "issuedBy" : {
          "type" : "string"
        },
        "issuedTo" : {
          "type" : "string"
        },
        "modifiedBy" : {
          "type" : "string"
        },
        "modifiedTime" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "publicKey" : {
          "type" : "string"
        },
        "san" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "serialNo" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string"
        },
        "validFromInEpochSec" : {
          "type" : "string"
        },
        "validToInEpochSec" : {
          "type" : "string"
        }
      }
    },
    "BulkDeleteResource" : {
      "properties" : {
        "ids" : {
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      }
    },
    "CloudConnectorGroupResource" : {
      "properties" : {
        "creationTime" : {
          "type" : "string",
          "description" : "Only applicable for a GET request. Ignored in PUT/POST/DELETE requests."
        },
        "description" : {
          "type" : "string"
        },
        "cloudConnectors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Znf"
          }
        },
        "enabled" : {
          "type" : "boolean"
        },
        "geoLocationId" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string",
          "description" : "Only applicable for a GET request. Ignored in PUT/POST/DELETE requests."
        },
        "modifiedBy" : {
          "type" : "string",
          "description" : "Only applicable for a GET request. Ignored in PUT/POST/DELETE requests."
        },
        "modifiedTime" : {
          "type" : "string",
          "description" : "Only applicable for a GET request. Ignored in PUT/POST/DELETE requests."
        },
        "name" : {
          "type" : "string"
        },
        "ziaCloud" : {
          "type" : "string"
        },
        "ziaOrgId" : {
          "type" : "string"
        }
      }
    },
    "CommonAppConfigDto" : {
      "properties" : {
        "allowOptions" : {
          "type" : "boolean"
        },
        "appId" : {
          "type" : "string"
        },
        "appTypes" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "BROWSER_ACCESS", "SIPA", "INSPECT" ]
          }
        },
        "applicationPort" : {
          "type" : "string"
        },
        "applicationProtocol" : {
          "type" : "string",
          "enum" : [ "HTTP", "HTTPS", "FTP", "RDP" ]
        },
        "baAppId" : {
          "type" : "string"
        },
        "certificateId" : {
          "type" : "string"
        },
        "certificateName" : {
          "type" : "string"
        },
        "cname" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "domain" : {
          "type" : "string"
        },
        "enabled" : {
          "type" : "boolean"
        },
        "hidden" : {
          "type" : "boolean"
        },
        "inspectAppId" : {
          "type" : "string"
        },
        "localDomain" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "path" : {
          "type" : "string"
        },
        "portal" : {
          "type" : "boolean"
        },
        "trustUntrustedCert" : {
          "type" : "boolean"
        }
      }
    },
    "CommonApplicationDto" : {
      "properties" : {
        "appsConfig" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CommonAppConfigDto"
          }
        },
        "deletedBaApps" : {
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "deletedInspectApps" : {
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      }
    },
    "ConditionSet" : {
      "properties" : {
        "creationTime" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "modifiedBy" : {
          "type" : "string"
        },
        "modifiedTime" : {
          "type" : "string"
        },
        "negated" : {
          "type" : "boolean"
        },
        "operands" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Operand"
          }
        },
        "operator" : {
          "type" : "string",
          "enum" : [ "AND", "OR" ]
        }
      }
    },
    "ConditionSetResource" : {
      "properties" : {
        "creationTime" : {
          "type" : "string",
          "description" : "Only applicable for a GET request. Ignored in PUT/POST/DELETE requests."
        },
        "id" : {
          "type" : "string",
          "description" : "Only applicable for a GET request. Ignored in PUT/POST/DELETE requests."
        },
        "modifiedBy" : {
          "type" : "string",
          "description" : "Only applicable for a GET request. Ignored in PUT/POST/DELETE requests."
        },
        "modifiedTime" : {
          "type" : "string",
          "description" : "Only applicable for a GET request. Ignored in PUT/POST/DELETE requests."
        },
        "negated" : {
          "type" : "boolean"
        },
        "operands" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OperandResource"
          }
        },
        "operator" : {
          "type" : "string",
          "enum" : [ "AND", "OR" ]
        },
        "setIds" : {
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      }
    },
    "Connector" : {
      "required" : [ "name" ],
      "properties" : {
        "applicationStartTime" : {
          "type" : "string"
        },
        "appConnectorGroupId" : {
          "type" : "string"
        },
        "appConnectorGroupName" : {
          "type" : "string"
        },
        "controlChannelStatus" : {
          "type" : "string",
          "description" : "Read only. Ignored in PUT/POST calls. Expected values: UNKNOWN/ZPN_STATUS_AUTHENTICATED(1)/ZPN_STATUS_DISCONNECTED",
          "enum" : [ "UNKNOWN", "ZPN_STATUS_AUTHENTICATED", "ZPN_STATUS_DISCONNECTED" ]
        },
        "creationTime" : {
          "type" : "string"
        },
        "ctrlBrokerName" : {
          "type" : "string",
          "description" : "Read only. Ignored in PUT/POST calls."
        },
        "currentVersion" : {
          "type" : "string",
          "description" : "Read only. Ignored in PUT/POST calls."
        },
        "description" : {
          "type" : "string"
        },
        "enabled" : {
          "type" : "boolean"
        },
        "expectedUpgradeTime" : {
          "type" : "string",
          "description" : "Read only. Ignored in PUT/POST calls."
        },
        "expectedVersion" : {
          "type" : "string",
          "description" : "Read only. Ignored in PUT/POST calls."
        },
        "fingerprint" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "ipAcl" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "issuedCertId" : {
          "type" : "string"
        },
        "lastBrokerConnectTime" : {
          "type" : "string",
          "description" : "Read only. Ignored in PUT/POST calls."
        },
        "lastBrokerConnectTimeDuration" : {
          "type" : "string",
          "description" : "Read only. Ignored in PUT/POST calls."
        },
        "lastBrokerDisconnectTime" : {
          "type" : "string",
          "description" : "Read only. Ignored in PUT/POST calls."
        },
        "lastBrokerDisconnectTimeDuration" : {
          "type" : "string",
          "description" : "Read only. Ignored in PUT/POST calls."
        },
        "lastUpgradeTime" : {
          "type" : "string",
          "description" : "Read only. Ignored in PUT/POST calls."
        },
        "latitude" : {
          "type" : "number",
          "format" : "double"
        },
        "location" : {
          "type" : "string"
        },
        "longitude" : {
          "type" : "number",
          "format" : "double"
        },
        "modifiedBy" : {
          "type" : "string"
        },
        "modifiedTime" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "provisioningKeyId" : {
          "type" : "string"
        },
        "provisioningKeyName" : {
          "type" : "string"
        },
        "platform" : {
          "type" : "string"
        },
        "previousVersion" : {
          "type" : "string",
          "description" : "Read only. Ignored in PUT/POST calls."
        },
        "privateIp" : {
          "type" : "string"
        },
        "publicIp" : {
          "type" : "string"
        },
        "sargeVersion" : {
          "type" : "string"
        },
        "enrollmentCert" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "upgradeAttempt" : {
          "type" : "string",
          "description" : "Read only. Ignored in PUT/POST calls."
        },
        "upgradeStatus" : {
          "type" : "string",
          "description" : "Read only. Ignored in PUT/POST calls.",
          "enum" : [ "COMPLETE", "IN_PROGRESS", "FAILED", "UNKNOWN", "RESTARTING" ]
        }
      }
    },
    "CustomScopeRequestCustomerIds" : {
      "properties" : {
        "addCustomerIds" : {
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "deleteCustomerIds" : {
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      }
    },
    "CustomerIdNameDTO" : {
      "properties" : {
        "customerId" : {
          "type" : "string"
        },
        "excludeConstellation" : {
          "type" : "boolean"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "EnrollmentCert" : {
      "required" : [ "certificate" ],
      "properties" : {
        "allowSigning" : {
          "type" : "boolean",
          "description" : "Not applicable for put and post calls. This field will be extracted from certificate."
        },
        "cName" : {
          "type" : "string",
          "description" : "Not applicable for put and post calls. This field will be extracted from certificate."
        },
        "certificate" : {
          "type" : "string",
          "description" : "certificate text in pem format."
        },
        "clientCertType" : {
          "type" : "string",
          "description" : "Read only property. Applicable only for GET calls, ignored in PUT/POST calls.",
          "enum" : [ "ZAPP_CLIENT", "ISOLATION_CLIENT", "NONE" ]
        },
        "creationTime" : {
          "type" : "string"
        },
        "csr" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "issuedBy" : {
          "type" : "string"
        },
        "issuedTo" : {
          "type" : "string"
        },
        "modifiedBy" : {
          "type" : "string"
        },
        "modifiedTime" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "parentCertId" : {
          "type" : "string"
        },
        "parentCertName" : {
          "type" : "string",
          "description" : "Read only property. Applicable only for GET calls, ignored in PUT/POST calls."
        },
        "privateKey" : {
          "type" : "string"
        },
        "privateKeyPresent" : {
          "type" : "boolean",
          "description" : "Read only property. Applicable only for GET calls, ignored in PUT/POST calls."
        },
        "serialNo" : {
          "type" : "string"
        },
        "validFromInEpochSec" : {
          "type" : "string",
          "description" : "Not applicable for put and post calls. This field will be extracted from certificate."
        },
        "validToInEpochSec" : {
          "type" : "string",
          "description" : "Not applicable for put and post calls. This field will be extracted from certificate."
        },
        "zrsaencryptedprivatekey" : {
          "type" : "string"
        },
        "zrsaencryptedsessionkey" : {
          "type" : "string"
        }
      }
    },
    "Idp" : {
      "required" : [ "idpEntityId", "loginUrl", "name" ],
      "properties" : {
        "adminMetadata" : {
          "$ref" : "#/definitions/ServiceProvider"
        },
        "adminSpSigningCertId" : {
          "type" : "string"
        },
        "autoProvision" : {
          "type" : "string",
          "description" : "defaults to 0."
        },
        "certificates" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/IdpCertDto"
          }
        },
        "creationTime" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "disableSamlBasedPolicy" : {
          "type" : "boolean"
        },
        "domainList" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "enableScimBasedPolicy" : {
          "type" : "boolean"
        },
        "enabled" : {
          "type" : "boolean",
          "description" : "Default value if null is True."
        },
        "id" : {
          "type" : "string"
        },
        "idpEntityId" : {
          "type" : "string"
        },
        "loginNameAttribute" : {
          "type" : "string"
        },
        "loginUrl" : {
          "type" : "string"
        },
        "modifiedBy" : {
          "type" : "string"
        },
        "modifiedTime" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "reauthOnUserUpdate" : {
          "type" : "boolean"
        },
        "redirectBinding" : {
          "type" : "boolean"
        },
        "scimEnabled" : {
          "type" : "boolean"
        },
        "scimServiceProviderEndpoint" : {
          "type" : "string"
        },
        "scimSharedSecretExists" : {
          "type" : "boolean"
        },
        "signSamlRequest" : {
          "type" : "string",
          "description" : "Defaults to 1."
        },
        "ssoType" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "useCustomSPMetadata" : {
          "type" : "boolean"
        },
        "userMetadata" : {
          "$ref" : "#/definitions/ServiceProvider"
        },
        "userSpSigningCertId" : {
          "type" : "string"
        }
      }
    },
    "IdpCertDto" : {
      "properties" : {
        "cName" : {
          "type" : "string"
        },
        "certificate" : {
          "type" : "string"
        },
        "serialNo" : {
          "type" : "string"
        },
        "validFromInSec" : {
          "type" : "string"
        },
        "validToInSec" : {
          "type" : "string"
        }
      }
    },
    "InspectAppDto" : {
      "properties" : {
        "appId" : {
          "type" : "string"
        },
        "applicationPort" : {
          "type" : "string"
        },
        "applicationProtocol" : {
          "type" : "string",
          "enum" : [ "HTTP", "HTTPS", "FTP", "RDP" ]
        },
        "certificateId" : {
          "type" : "string"
        },
        "certificateName" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "domain" : {
          "type" : "string"
        },
        "enabled" : {
          "type" : "boolean"
        },
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "LhsRhsValueResource" : {
      "properties" : {
        "lhs" : {
          "type" : "string"
        },
        "rhs" : {
          "type" : "string"
        }
      }
    },
    "Lss" : {
      "required" : [ "name" ],
      "properties" : {
        "auditMessage" : {
          "type" : "string"
        },
        "creationTime" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "enabled" : {
          "type" : "boolean"
        },
        "filter" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "format" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "modifiedBy" : {
          "type" : "string"
        },
        "modifiedTime" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "lssHost" : {
          "type" : "string"
        },
        "lssPort" : {
          "type" : "string"
        },
        "sourceLogType" : {
          "type" : "string",
          "enum" : [ "zpn_trans_log", "zpn_auth_log", "zpn_ast_auth_log", "zpn_http_trans_log", "zpn_audit_log", "zpn_sys_auth_log", "zpn_ast_comprehensive_stats", "zpn_http_insp" ]
        },
        "useTls" : {
          "type" : "boolean"
        }
      }
    },
    "LssResource" : {
      "properties" : {
        "config" : {
          "$ref" : "#/definitions/Lss"
        },
        "connectorGroups" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AppConnectorGroup"
          }
        },
        "id" : {
          "type" : "string"
        },
        "policyRule" : {
          "$ref" : "#/definitions/PolicyRule"
        },
        "policyRuleResource" : {
          "$ref" : "#/definitions/PolicyRuleResource"
        }
      }
    },
    "Machine" : {
      "required" : [ "name" ],
      "properties" : {
        "creationTime" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "fingerprint" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "issuedCertId" : {
          "type" : "string"
        },
        "machineGroupId" : {
          "type" : "string"
        },
        "machineGroupName" : {
          "type" : "string"
        },
        "machineTokenId" : {
          "type" : "string"
        },
        "modifiedBy" : {
          "type" : "string"
        },
        "modifiedTime" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "enrollmentCert" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "MachineGroup" : {
      "required" : [ "name" ],
      "properties" : {
        "creationTime" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "enabled" : {
          "type" : "boolean"
        },
        "id" : {
          "type" : "string"
        },
        "machines" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Machine"
          }
        },
        "modifiedBy" : {
          "type" : "string"
        },
        "modifiedTime" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "NameIdDto" : {
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "Operand" : {
      "properties" : {
        "creationTime" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "idpId" : {
          "type" : "string"
        },
        "lhs" : {
          "type" : "string"
        },
        "modifiedBy" : {
          "type" : "string"
        },
        "modifiedTime" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "objectType" : {
          "type" : "string",
          "enum" : [ "USER", "USER_GROUP", "LOCATION", "APP", "APP_GROUP", "SAML", "POSTURE", "CLIENT_TYPE", "IDP", "TRUSTED_NETWORK", "EDGE_CONNECTOR_GROUP", "MACHINE_GRP", "SCIM", "SCIM_GROUP" ]
        },
        "rhs" : {
          "type" : "string"
        }
      }
    },
    "OperandResource" : {
      "properties" : {
        "commonProperties" : {
          "$ref" : "#/definitions/Operand"
        },
        "creationTime" : {
          "type" : "string",
          "description" : "Only applicable for a GET request. Ignored in PUT/POST/DELETE requests."
        },
        "entryValues" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/LhsRhsValueResource"
          }
        },
        "id" : {
          "type" : "string",
          "description" : "Only applicable for a GET request. Ignored in PUT/POST/DELETE requests."
        },
        "idpId" : {
          "type" : "string"
        },
        "modifiedBy" : {
          "type" : "string",
          "description" : "Only applicable for a GET request. Ignored in PUT/POST/DELETE requests."
        },
        "modifiedTime" : {
          "type" : "string",
          "description" : "Only applicable for a GET request. Ignored in PUT/POST/DELETE requests."
        },
        "objectType" : {
          "type" : "string",
          "enum" : [ "USER", "USER_GROUP", "LOCATION", "APP", "APP_GROUP", "SAML", "POSTURE", "CLIENT_TYPE", "IDP", "TRUSTED_NETWORK", "EDGE_CONNECTOR_GROUP", "MACHINE_GRP", "SCIM", "SCIM_GROUP" ]
        },
        "values" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "PageListOfAppConnectorGroup" : {
      "properties" : {
        "list" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AppConnectorGroup"
          }
        },
        "totalPages" : {
          "type" : "string"
        }
      }
    },
    "PageListOfApplicationResource" : {
      "properties" : {
        "list" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApplicationResource"
          }
        },
        "totalPages" : {
          "type" : "string"
        }
      }
    },
    "PageListOfApplicationServer" : {
      "properties" : {
        "list" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApplicationServer"
          }
        },
        "totalPages" : {
          "type" : "string"
        }
      }
    },
    "PageListOfBACertificate" : {
      "properties" : {
        "list" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/BACertificate"
          }
        },
        "totalPages" : {
          "type" : "string"
        }
      }
    },
    "PageListOfCloudConnectorGroupResource" : {
      "properties" : {
        "list" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CloudConnectorGroupResource"
          }
        },
        "totalPages" : {
          "type" : "string"
        }
      }
    },
    "PageListOfConnector" : {
      "properties" : {
        "list" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Connector"
          }
        },
        "totalPages" : {
          "type" : "string"
        }
      }
    },
    "PageListOfEnrollmentCert" : {
      "properties" : {
        "list" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EnrollmentCert"
          }
        },
        "totalPages" : {
          "type" : "string"
        }
      }
    },
    "PageListOfIdp" : {
      "properties" : {
        "list" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Idp"
          }
        },
        "totalPages" : {
          "type" : "string"
        }
      }
    },
    "PageListOfLssResource" : {
      "properties" : {
        "list" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/LssResource"
          }
        },
        "totalPages" : {
          "type" : "string"
        }
      }
    },
    "PageListOfMachineGroup" : {
      "properties" : {
        "list" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MachineGroup"
          }
        },
        "totalPages" : {
          "type" : "string"
        }
      }
    },
    "PageListOfPolicyRule" : {
      "properties" : {
        "list" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PolicyRule"
          }
        },
        "totalPages" : {
          "type" : "string"
        }
      }
    },
    "PageListOfPostureProfile" : {
      "properties" : {
        "list" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PostureProfile"
          }
        },
        "totalPages" : {
          "type" : "string"
        }
      }
    },
    "PageListOfProvisioningKey" : {
      "properties" : {
        "list" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Provisioning Key"
          }
        },
        "totalPages" : {
          "type" : "string"
        }
      }
    },
    "PageListOfSCIMAttributeHeader" : {
      "properties" : {
        "list" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SCIMAttributeHeader"
          }
        },
        "totalPages" : {
          "type" : "string"
        }
      }
    },
    "PageListOfSamlAttribute" : {
      "properties" : {
        "list" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SamlAttribute"
          }
        },
        "totalPages" : {
          "type" : "string"
        }
      }
    },
    "PageListOfSegmentGroup" : {
      "properties" : {
        "list" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SegmentGroup"
          }
        },
        "totalPages" : {
          "type" : "string"
        }
      }
    },
    "PageListOfServerGroupDTO" : {
      "properties" : {
        "list" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServerGroupDTO"
          }
        },
        "totalPages" : {
          "type" : "string"
        }
      }
    },
    "PageListOfServiceEdge" : {
      "properties" : {
        "list" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceEdge"
          }
        },
        "totalPages" : {
          "type" : "string"
        }
      }
    },
    "PageListOfServiceEdgeGroup" : {
      "properties" : {
        "list" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceEdgeGroup"
          }
        },
        "totalPages" : {
          "type" : "string"
        }
      }
    },
    "PageListOfTrustedNetwork" : {
      "properties" : {
        "list" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TrustedNetwork"
          }
        },
        "totalPages" : {
          "type" : "string"
        }
      }
    },
    "PageListOfVersionProfile" : {
      "properties" : {
        "list" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VersionProfile"
          }
        },
        "totalPages" : {
          "type" : "string"
        }
      }
    },
    "PolicyRule" : {
      "required" : [ "name" ],
      "properties" : {
        "action" : {
          "type" : "string",
          "enum" : [ "ALLOW", "DENY", "LOG", "RE_AUTH", "NEVER", "BYPASS", "INTERCEPT", "NO_DOWNLOAD", "BYPASS_RE_AUTH", "INTERCEPT_ACCESSIBLE", "ISOLATE", "BYPASS_ISOLATE", "INSPECT", "BYPASS_INSPECT" ]
        },
        "actionId" : {
          "type" : "string"
        },
        "appServerGroups" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AppServerGroup"
          }
        },
        "appConnectorGroups" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AppConnectorGroup"
          }
        },
        "conditions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConditionSet"
          }
        },
        "creationTime" : {
          "type" : "string"
        },
        "customMsg" : {
          "type" : "string"
        },
        "defaultRule" : {
          "type" : "boolean"
        },
        "defaultRuleName" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "modifiedBy" : {
          "type" : "string"
        },
        "modifiedTime" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "operator" : {
          "type" : "string",
          "enum" : [ "AND", "OR" ]
        },
        "policySetId" : {
          "type" : "string"
        },
        "policyType" : {
          "type" : "string"
        },
        "priority" : {
          "type" : "string"
        },
        "reauthIdleTimeout" : {
          "type" : "string"
        },
        "reauthTimeout" : {
          "type" : "string"
        },
        "ruleOrder" : {
          "type" : "string"
        },
        "zpnCbiProfileId" : {
          "type" : "string"
        },
        "zpnInspectionProfileId" : {
          "type" : "string"
        },
        "zpnInspectionProfileName" : {
          "type" : "string"
        }
      }
    },
    "PolicyRuleResource" : {
      "properties" : {
        "action" : {
          "type" : "string",
          "enum" : [ "ALLOW", "DENY", "LOG", "RE_AUTH", "NEVER", "BYPASS", "INTERCEPT", "NO_DOWNLOAD", "BYPASS_RE_AUTH", "INTERCEPT_ACCESSIBLE", "ISOLATE", "BYPASS_ISOLATE", "INSPECT", "BYPASS_INSPECT" ]
        },
        "actionId" : {
          "type" : "string"
        },
        "appServerGroups" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AppServerGroupResource"
          }
        },
        "appConnectorGroups" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AppConnectorGroupResource"
          }
        },
        "auditMessage" : {
          "type" : "string"
        },
        "conditions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConditionSetResource"
          }
        },
        "creationTime" : {
          "type" : "string",
          "description" : "Only applicable for a GET request. Ignored in PUT/POST/DELETE requests."
        },
        "customMsg" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string",
          "description" : "Only applicable for a GET request. Ignored in PUT/POST/DELETE requests."
        },
        "modifiedBy" : {
          "type" : "string",
          "description" : "Only applicable for a GET request. Ignored in PUT/POST/DELETE requests."
        },
        "modifiedTime" : {
          "type" : "string",
          "description" : "Only applicable for a GET request. Ignored in PUT/POST/DELETE requests."
        },
        "name" : {
          "type" : "string"
        },
        "operator" : {
          "type" : "string",
          "enum" : [ "AND", "OR" ]
        },
        "policySetId" : {
          "type" : "string"
        },
        "policyType" : {
          "type" : "string"
        },
        "priority" : {
          "type" : "string"
        },
        "reauthIdleTimeout" : {
          "type" : "string"
        },
        "reauthTimeout" : {
          "type" : "string"
        },
        "ruleOrder" : {
          "type" : "string"
        },
        "version" : {
          "type" : "string"
        },
        "zpnCbiProfileId" : {
          "type" : "string"
        },
        "zpnInspectionProfileId" : {
          "type" : "string"
        },
        "zpnInspectionProfileName" : {
          "type" : "string"
        }
      }
    },
    "PolicySet" : {
      "required" : [ "name" ],
      "properties" : {
        "creationTime" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "enabled" : {
          "type" : "boolean"
        },
        "id" : {
          "type" : "string"
        },
        "modifiedBy" : {
          "type" : "string"
        },
        "modifiedTime" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "policyType" : {
          "type" : "string"
        },
        "rules" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PolicyRule"
          }
        },
        "sorted" : {
          "type" : "boolean"
        }
      }
    },
    "PostureProfile" : {
      "required" : [ "name" ],
      "properties" : {
        "creationTime" : {
          "type" : "string"
        },
        "domain" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "masterCustomerId" : {
          "type" : "string"
        },
        "modifiedBy" : {
          "type" : "string"
        },
        "modifiedTime" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "postureUdid" : {
          "type" : "string"
        },
        "zscalerCloud" : {
          "type" : "string"
        },
        "zscalerCustomerId" : {
          "type" : "string"
        }
      }
    },
    "Provisioning Key" : {
      "required" : [ "enrollmentCertId", "maxUsage", "name" ],
      "properties" : {
        "appConnectorGroupId" : {
          "type" : "string"
        },
        "appConnectorGroupName" : {
          "type" : "string",
          "description" : "Read only property. Applicable only for GET calls, ignored in PUT/POST calls."
        },
        "creationTime" : {
          "type" : "string"
        },
        "enabled" : {
          "type" : "boolean"
        },
        "expirationInEpochSec" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "ipAcl" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "maxUsage" : {
          "type" : "string"
        },
        "modifiedBy" : {
          "type" : "string"
        },
        "modifiedTime" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "provisioningKey" : {
          "type" : "string",
          "description" : "read only field. Ignored in PUT/POST calls."
        },
        "enrollmentCertId" : {
          "type" : "string"
        },
        "enrollmentCertName" : {
          "type" : "string",
          "description" : "Read only property. Applicable only for GET calls, ignored in PUT/POST calls."
        },
        "uiConfig" : {
          "type" : "string"
        },
        "usageCount" : {
          "type" : "string",
          "description" : "defaults to 0"
        },
        "zcomponentId" : {
          "type" : "string"
        },
        "zcomponentName" : {
          "type" : "string",
          "description" : "Read only property. Applicable only for GET calls, ignored in PUT/POST calls."
        }
      }
    },
    "SCIMAttributeHeader" : {
      "required" : [ "name" ],
      "properties" : {
        "canonicalValues" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "caseSensitive" : {
          "type" : "boolean"
        },
        "creationTime" : {
          "type" : "string"
        },
        "dataType" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "idpId" : {
          "type" : "string"
        },
        "modifiedBy" : {
          "type" : "string"
        },
        "modifiedTime" : {
          "type" : "string"
        },
        "multivalued" : {
          "type" : "boolean"
        },
        "mutability" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "required" : {
          "type" : "boolean"
        },
        "returned" : {
          "type" : "string"
        },
        "schemaURI" : {
          "type" : "string"
        },
        "uniqueness" : {
          "type" : "boolean"
        }
      }
    },
    "SamlAttribute" : {
      "required" : [ "name" ],
      "properties" : {
        "creationTime" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "idpId" : {
          "type" : "string"
        },
        "idpName" : {
          "type" : "string"
        },
        "modifiedBy" : {
          "type" : "string"
        },
        "modifiedTime" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "samlName" : {
          "type" : "string"
        },
        "userAttribute" : {
          "type" : "boolean"
        }
      }
    },
    "SegmentGroup" : {
      "required" : [ "name" ],
      "properties" : {
        "applications" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Application"
          }
        },
        "configSpace" : {
          "type" : "string",
          "enum" : [ "DEFAULT", "SIEM" ]
        },
        "creationTime" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "enabled" : {
          "type" : "boolean"
        },
        "id" : {
          "type" : "string"
        },
        "modifiedBy" : {
          "type" : "string"
        },
        "modifiedTime" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "policyMigrated" : {
          "type" : "boolean"
        },
        "tcpKeepAliveEnabled" : {
          "type" : "string"
        }
      }
    },
    "ServerGroupDTO" : {
      "properties" : {
        "applications" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NameIdDto"
          }
        },
        "appConnectorGroups" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AppConnectorGroup"
          }
        },
        "configSpace" : {
          "type" : "string",
          "enum" : [ "DEFAULT", "SIEM" ]
        },
        "creationTime" : {
          "type" : "string",
          "description" : "Only applicable for a GET request. Ignored in PUT/POST/DELETE requests."
        },
        "description" : {
          "type" : "string"
        },
        "enabled" : {
          "type" : "boolean"
        },
        "id" : {
          "type" : "string",
          "description" : "Only applicable for a GET request. Ignored in PUT/POST/DELETE requests."
        },
        "ipAnchored" : {
          "type" : "boolean"
        },
        "dynamicDiscovery" : {
          "type" : "boolean",
          "description" : "Defaults to false."
        },
        "modifiedBy" : {
          "type" : "string",
          "description" : "Only applicable for a GET request. Ignored in PUT/POST/DELETE requests."
        },
        "modifiedTime" : {
          "type" : "string",
          "description" : "Only applicable for a GET request. Ignored in PUT/POST/DELETE requests."
        },
        "name" : {
          "type" : "string"
        },
        "servers" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApplicationServer"
          }
        }
      }
    },
    "ServiceEdge" : {
      "required" : [ "name" ],
      "properties" : {
        "applicationStartTime" : {
          "type" : "string"
        },
        "controlChannelStatus" : {
          "type" : "string",
          "description" : "ReadOnly. Ignored in PUT/POST calls. Expected values: UNKNOWN/ZPN_STATUS_AUTHENTICATED(1)/ZPN_STATUS_DISCONNECTED",
          "enum" : [ "UNKNOWN", "ZPN_STATUS_AUTHENTICATED", "ZPN_STATUS_DISCONNECTED" ]
        },
        "creationTime" : {
          "type" : "string"
        },
        "ctrlBrokerName" : {
          "type" : "string",
          "description" : "ReadOnly. Ignored in PUT/POST calls."
        },
        "currentVersion" : {
          "type" : "string",
          "description" : "ReadOnly. Ignored in PUT/POST calls"
        },
        "description" : {
          "type" : "string"
        },
        "enabled" : {
          "type" : "boolean"
        },
        "expectedUpgradeTime" : {
          "type" : "string",
          "description" : "ReadOnly. Ignored in PUT/POST calls"
        },
        "expectedVersion" : {
          "type" : "string",
          "description" : "ReadOnly. Ignored in PUT/POST calls"
        },
        "fingerprint" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "ipAcl" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "issuedCertId" : {
          "type" : "string"
        },
        "lastBrokerConnectTime" : {
          "type" : "string",
          "description" : "ReadOnly. Ignored in PUT/POST calls."
        },
        "lastBrokerConnectTimeDuration" : {
          "type" : "string",
          "description" : "Read only. Ignored in PUT/POST calls."
        },
        "lastBrokerDisconnectTime" : {
          "type" : "string",
          "description" : "ReadOnly. Ignored in PUT/POST calls."
        },
        "lastBrokerDisconnectTimeDuration" : {
          "type" : "string",
          "description" : "Read only. Ignored in PUT/POST calls."
        },
        "lastUpgradeTime" : {
          "type" : "string",
          "description" : "ReadOnly. Ignored in PUT/POST calls"
        },
        "latitude" : {
          "type" : "string"
        },
        "listenIps" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "location" : {
          "type" : "string"
        },
        "longitude" : {
          "type" : "string"
        },
        "modifiedBy" : {
          "type" : "string"
        },
        "modifiedTime" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "provisioningKeyId" : {
          "type" : "string"
        },
        "provisioningKeyName" : {
          "type" : "string"
        },
        "platform" : {
          "type" : "string"
        },
        "previousVersion" : {
          "type" : "string",
          "description" : "ReadOnly. Ignored in PUT/POST calls"
        },
        "serviceEdgeGroupId" : {
          "type" : "string"
        },
        "serviceEdgeGroupName" : {
          "type" : "string"
        },
        "privateIp" : {
          "type" : "string"
        },
        "publicIp" : {
          "type" : "string"
        },
        "publishIps" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "sargeVersion" : {
          "type" : "string"
        },
        "enrollmentCert" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "upgradeAttempt" : {
          "type" : "string",
          "description" : "ReadOnly. Ignored in PUT/POST calls."
        },
        "upgradeStatus" : {
          "type" : "string",
          "description" : "ReadOnly. Ignored in PUT/POST calls",
          "enum" : [ "COMPLETE", "IN_PROGRESS", "FAILED", "UNKNOWN", "RESTARTING" ]
        }
      }
    },
    "ServiceEdgeGroup" : {
      "required" : [ "name" ],
      "properties" : {
        "cityCountry" : {
          "type" : "string"
        },
        "countryCode" : {
          "type" : "string"
        },
        "creationTime" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "enabled" : {
          "type" : "boolean"
        },
        "geoLocationId" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "isPublic" : {
          "type" : "string"
        },
        "latitude" : {
          "type" : "string"
        },
        "location" : {
          "type" : "string"
        },
        "longitude" : {
          "type" : "string"
        },
        "modifiedBy" : {
          "type" : "string"
        },
        "modifiedTime" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "overrideVersionProfile" : {
          "type" : "boolean"
        },
        "serviceEdges" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceEdge"
          }
        },
        "trustedNetworks" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TrustedNetwork"
          }
        },
        "upgradeDay" : {
          "type" : "string"
        },
        "upgradeTimeInSecs" : {
          "type" : "string"
        },
        "versionProfileId" : {
          "type" : "string"
        },
        "versionProfileName" : {
          "type" : "string",
          "description" : "Only applicable for a GET request. Ignored in PUT/POST/DELETE requests."
        },
        "versionProfileVisibilityScope" : {
          "type" : "string",
          "description" : "Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.",
          "enum" : [ "ALL", "NONE", "CUSTOM" ]
        }
      }
    },
    "ServiceProvider" : {
      "properties" : {
        "certificateUrl" : {
          "type" : "string"
        },
        "spBaseUrl" : {
          "type" : "string"
        },
        "spEntityId" : {
          "type" : "string"
        },
        "spMetadataUrl" : {
          "type" : "string"
        },
        "spPostUrl" : {
          "type" : "string"
        }
      }
    },
    "TrustedNetwork" : {
      "required" : [ "name" ],
      "properties" : {
        "creationTime" : {
          "type" : "string"
        },
        "domain" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "masterCustomerId" : {
          "type" : "string"
        },
        "modifiedBy" : {
          "type" : "string"
        },
        "modifiedTime" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "networkId" : {
          "type" : "string"
        },
        "zscalerCloud" : {
          "type" : "string"
        }
      }
    },
    "Version" : {
      "properties" : {
        "creationTime" : {
          "type" : "string"
        },
        "customerId" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "modifiedBy" : {
          "type" : "string"
        },
        "modifiedTime" : {
          "type" : "string"
        },
        "platform" : {
          "type" : "string"
        },
        "restartAfterUptimeInDays" : {
          "type" : "string"
        },
        "role" : {
          "type" : "string"
        },
        "version" : {
          "type" : "string"
        },
        "version_profile_gid" : {
          "type" : "string"
        }
      }
    },
    "VersionProfile" : {
      "properties" : {
        "creationTime" : {
          "type" : "string"
        },
        "customScopeCustomerIds" : {
          "type" : "array",
          "description" : "Only applicable for a GET requests. Ignored in PUT/POST requests.",
          "items" : {
            "$ref" : "#/definitions/CustomerIdNameDTO"
          }
        },
        "customScopeRequestCustomerIds" : {
          "description" : "Not applicable for GET requests. Field is only applicable in PUT/POST requests.",
          "$ref" : "#/definitions/CustomScopeRequestCustomerIds"
        },
        "customerId" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "modifiedBy" : {
          "type" : "string"
        },
        "modifiedTime" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "upgradePriority" : {
          "type" : "string",
          "enum" : [ "WEEK", "DAY", "FORCE_NOW", "NOW" ]
        },
        "versions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Version"
          }
        },
        "visibilityScope" : {
          "type" : "string",
          "enum" : [ "ALL", "NONE", "CUSTOM" ]
        }
      }
    },
    "Znf" : {
      "required" : [ "name" ],
      "properties" : {
        "creationTime" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "enabled" : {
          "type" : "boolean"
        },
        "fingerprint" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "ipAcl" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "issuedCertId" : {
          "type" : "string"
        },
        "modifiedBy" : {
          "type" : "string"
        },
        "modifiedTime" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "enrollmentCert" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    }
  }
}