// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConditionSetResource condition set resource
//
// swagger:model ConditionSetResource
type ConditionSetResource struct {

	// Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.
	CreationTime string `json:"creationTime,omitempty"`

	// Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.
	ID string `json:"id,omitempty"`

	// Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.
	ModifiedBy string `json:"modifiedBy,omitempty"`

	// Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.
	ModifiedTime string `json:"modifiedTime,omitempty"`

	// negated
	Negated bool `json:"negated,omitempty"`

	// operands
	Operands []*OperandResource `json:"operands"`

	// operator
	// Enum: [AND OR]
	Operator string `json:"operator,omitempty"`

	// set ids
	SetIds []int64 `json:"setIds"`
}

// Validate validates this condition set resource
func (m *ConditionSetResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperands(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConditionSetResource) validateOperands(formats strfmt.Registry) error {
	if swag.IsZero(m.Operands) { // not required
		return nil
	}

	for i := 0; i < len(m.Operands); i++ {
		if swag.IsZero(m.Operands[i]) { // not required
			continue
		}

		if m.Operands[i] != nil {
			if err := m.Operands[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("operands" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("operands" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var conditionSetResourceTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AND","OR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		conditionSetResourceTypeOperatorPropEnum = append(conditionSetResourceTypeOperatorPropEnum, v)
	}
}

const (

	// ConditionSetResourceOperatorAND captures enum value "AND"
	ConditionSetResourceOperatorAND string = "AND"

	// ConditionSetResourceOperatorOR captures enum value "OR"
	ConditionSetResourceOperatorOR string = "OR"
)

// prop value enum
func (m *ConditionSetResource) validateOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, conditionSetResourceTypeOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ConditionSetResource) validateOperator(formats strfmt.Registry) error {
	if swag.IsZero(m.Operator) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", m.Operator); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this condition set resource based on the context it is used
func (m *ConditionSetResource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOperands(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConditionSetResource) contextValidateOperands(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Operands); i++ {

		if m.Operands[i] != nil {
			if err := m.Operands[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("operands" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("operands" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConditionSetResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConditionSetResource) UnmarshalBinary(b []byte) error {
	var res ConditionSetResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
