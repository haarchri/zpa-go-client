// Code generated by go-swagger; DO NOT EDIT.

package lss_config_controller_v_2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetAllUsingGET8Params creates a new GetAllUsingGET8Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAllUsingGET8Params() *GetAllUsingGET8Params {
	return &GetAllUsingGET8Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAllUsingGET8ParamsWithTimeout creates a new GetAllUsingGET8Params object
// with the ability to set a timeout on a request.
func NewGetAllUsingGET8ParamsWithTimeout(timeout time.Duration) *GetAllUsingGET8Params {
	return &GetAllUsingGET8Params{
		timeout: timeout,
	}
}

// NewGetAllUsingGET8ParamsWithContext creates a new GetAllUsingGET8Params object
// with the ability to set a context for a request.
func NewGetAllUsingGET8ParamsWithContext(ctx context.Context) *GetAllUsingGET8Params {
	return &GetAllUsingGET8Params{
		Context: ctx,
	}
}

// NewGetAllUsingGET8ParamsWithHTTPClient creates a new GetAllUsingGET8Params object
// with the ability to set a custom HTTPClient for a request.
func NewGetAllUsingGET8ParamsWithHTTPClient(client *http.Client) *GetAllUsingGET8Params {
	return &GetAllUsingGET8Params{
		HTTPClient: client,
	}
}

/* GetAllUsingGET8Params contains all the parameters to send to the API endpoint
   for the get all using g e t 8 operation.

   Typically these are written to a http.Request.
*/
type GetAllUsingGET8Params struct {

	/* CustomerID.

	   The unique identifier of the ZPA tenant.
	*/
	CustomerID string

	/* Page.

	   Specifies the page number.
	*/
	Page string

	/* Pagesize.

	   Specifies the page size. If not provided, the default page size is 20. The max page size is 500.
	*/
	Pagesize string

	/* Search.

	   The search string used to support search by features and fields for the API.
	*/
	Search string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get all using g e t 8 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllUsingGET8Params) WithDefaults() *GetAllUsingGET8Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get all using g e t 8 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllUsingGET8Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get all using g e t 8 params
func (o *GetAllUsingGET8Params) WithTimeout(timeout time.Duration) *GetAllUsingGET8Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get all using g e t 8 params
func (o *GetAllUsingGET8Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get all using g e t 8 params
func (o *GetAllUsingGET8Params) WithContext(ctx context.Context) *GetAllUsingGET8Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get all using g e t 8 params
func (o *GetAllUsingGET8Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get all using g e t 8 params
func (o *GetAllUsingGET8Params) WithHTTPClient(client *http.Client) *GetAllUsingGET8Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get all using g e t 8 params
func (o *GetAllUsingGET8Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCustomerID adds the customerID to the get all using g e t 8 params
func (o *GetAllUsingGET8Params) WithCustomerID(customerID string) *GetAllUsingGET8Params {
	o.SetCustomerID(customerID)
	return o
}

// SetCustomerID adds the customerId to the get all using g e t 8 params
func (o *GetAllUsingGET8Params) SetCustomerID(customerID string) {
	o.CustomerID = customerID
}

// WithPage adds the page to the get all using g e t 8 params
func (o *GetAllUsingGET8Params) WithPage(page string) *GetAllUsingGET8Params {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get all using g e t 8 params
func (o *GetAllUsingGET8Params) SetPage(page string) {
	o.Page = page
}

// WithPagesize adds the pagesize to the get all using g e t 8 params
func (o *GetAllUsingGET8Params) WithPagesize(pagesize string) *GetAllUsingGET8Params {
	o.SetPagesize(pagesize)
	return o
}

// SetPagesize adds the pagesize to the get all using g e t 8 params
func (o *GetAllUsingGET8Params) SetPagesize(pagesize string) {
	o.Pagesize = pagesize
}

// WithSearch adds the search to the get all using g e t 8 params
func (o *GetAllUsingGET8Params) WithSearch(search string) *GetAllUsingGET8Params {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the get all using g e t 8 params
func (o *GetAllUsingGET8Params) SetSearch(search string) {
	o.Search = search
}

// WriteToRequest writes these params to a swagger request
func (o *GetAllUsingGET8Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param customerId
	if err := r.SetPathParam("customerId", o.CustomerID); err != nil {
		return err
	}

	// query param page
	qrPage := o.Page
	qPage := qrPage

	if err := r.SetQueryParam("page", qPage); err != nil {
		return err
	}

	// query param pagesize
	qrPagesize := o.Pagesize
	qPagesize := qrPagesize

	if err := r.SetQueryParam("pagesize", qPagesize); err != nil {
		return err
	}

	// query param search
	qrSearch := o.Search
	qSearch := qrSearch

	if err := r.SetQueryParam("search", qSearch); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
