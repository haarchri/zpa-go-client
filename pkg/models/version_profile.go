// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VersionProfile version profile
//
// swagger:model VersionProfile
type VersionProfile struct {

	// creation time
	CreationTime string `json:"creationTime,omitempty"`

	// Only applicable for a GET requests. Ignored in PUT/POST requests.
	CustomScopeCustomerIds []*CustomerIDNameDTO `json:"customScopeCustomerIds"`

	// Not applicable for GET requests. Field is only applicable in PUT/POST requests.
	CustomScopeRequestCustomerIds *CustomScopeRequestCustomerIds `json:"customScopeRequestCustomerIds,omitempty"`

	// customer Id
	CustomerID string `json:"customerId,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// modified by
	ModifiedBy string `json:"modifiedBy,omitempty"`

	// modified time
	ModifiedTime string `json:"modifiedTime,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// upgrade priority
	// Enum: [WEEK DAY FORCE_NOW NOW]
	UpgradePriority string `json:"upgradePriority,omitempty"`

	// versions
	Versions []*Version `json:"versions"`

	// visibility scope
	// Enum: [ALL NONE CUSTOM]
	VisibilityScope string `json:"visibilityScope,omitempty"`
}

// Validate validates this version profile
func (m *VersionProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomScopeCustomerIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomScopeRequestCustomerIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgradePriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisibilityScope(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VersionProfile) validateCustomScopeCustomerIds(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomScopeCustomerIds) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomScopeCustomerIds); i++ {
		if swag.IsZero(m.CustomScopeCustomerIds[i]) { // not required
			continue
		}

		if m.CustomScopeCustomerIds[i] != nil {
			if err := m.CustomScopeCustomerIds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customScopeCustomerIds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("customScopeCustomerIds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VersionProfile) validateCustomScopeRequestCustomerIds(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomScopeRequestCustomerIds) { // not required
		return nil
	}

	if m.CustomScopeRequestCustomerIds != nil {
		if err := m.CustomScopeRequestCustomerIds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customScopeRequestCustomerIds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customScopeRequestCustomerIds")
			}
			return err
		}
	}

	return nil
}

var versionProfileTypeUpgradePriorityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["WEEK","DAY","FORCE_NOW","NOW"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		versionProfileTypeUpgradePriorityPropEnum = append(versionProfileTypeUpgradePriorityPropEnum, v)
	}
}

const (

	// VersionProfileUpgradePriorityWEEK captures enum value "WEEK"
	VersionProfileUpgradePriorityWEEK string = "WEEK"

	// VersionProfileUpgradePriorityDAY captures enum value "DAY"
	VersionProfileUpgradePriorityDAY string = "DAY"

	// VersionProfileUpgradePriorityFORCENOW captures enum value "FORCE_NOW"
	VersionProfileUpgradePriorityFORCENOW string = "FORCE_NOW"

	// VersionProfileUpgradePriorityNOW captures enum value "NOW"
	VersionProfileUpgradePriorityNOW string = "NOW"
)

// prop value enum
func (m *VersionProfile) validateUpgradePriorityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, versionProfileTypeUpgradePriorityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VersionProfile) validateUpgradePriority(formats strfmt.Registry) error {
	if swag.IsZero(m.UpgradePriority) { // not required
		return nil
	}

	// value enum
	if err := m.validateUpgradePriorityEnum("upgradePriority", "body", m.UpgradePriority); err != nil {
		return err
	}

	return nil
}

func (m *VersionProfile) validateVersions(formats strfmt.Registry) error {
	if swag.IsZero(m.Versions) { // not required
		return nil
	}

	for i := 0; i < len(m.Versions); i++ {
		if swag.IsZero(m.Versions[i]) { // not required
			continue
		}

		if m.Versions[i] != nil {
			if err := m.Versions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("versions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("versions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var versionProfileTypeVisibilityScopePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ALL","NONE","CUSTOM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		versionProfileTypeVisibilityScopePropEnum = append(versionProfileTypeVisibilityScopePropEnum, v)
	}
}

const (

	// VersionProfileVisibilityScopeALL captures enum value "ALL"
	VersionProfileVisibilityScopeALL string = "ALL"

	// VersionProfileVisibilityScopeNONE captures enum value "NONE"
	VersionProfileVisibilityScopeNONE string = "NONE"

	// VersionProfileVisibilityScopeCUSTOM captures enum value "CUSTOM"
	VersionProfileVisibilityScopeCUSTOM string = "CUSTOM"
)

// prop value enum
func (m *VersionProfile) validateVisibilityScopeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, versionProfileTypeVisibilityScopePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VersionProfile) validateVisibilityScope(formats strfmt.Registry) error {
	if swag.IsZero(m.VisibilityScope) { // not required
		return nil
	}

	// value enum
	if err := m.validateVisibilityScopeEnum("visibilityScope", "body", m.VisibilityScope); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this version profile based on the context it is used
func (m *VersionProfile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustomScopeCustomerIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomScopeRequestCustomerIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VersionProfile) contextValidateCustomScopeCustomerIds(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CustomScopeCustomerIds); i++ {

		if m.CustomScopeCustomerIds[i] != nil {
			if err := m.CustomScopeCustomerIds[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customScopeCustomerIds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("customScopeCustomerIds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VersionProfile) contextValidateCustomScopeRequestCustomerIds(ctx context.Context, formats strfmt.Registry) error {

	if m.CustomScopeRequestCustomerIds != nil {
		if err := m.CustomScopeRequestCustomerIds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customScopeRequestCustomerIds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customScopeRequestCustomerIds")
			}
			return err
		}
	}

	return nil
}

func (m *VersionProfile) contextValidateVersions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Versions); i++ {

		if m.Versions[i] != nil {
			if err := m.Versions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("versions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("versions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VersionProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VersionProfile) UnmarshalBinary(b []byte) error {
	var res VersionProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
