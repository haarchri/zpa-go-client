// Code generated by go-swagger; DO NOT EDIT.

package lss_config_controller_v_2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new lss config controller v 2 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for lss config controller v 2 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddLssUsingPOST3(params *AddLssUsingPOST3Params, opts ...ClientOption) (*AddLssUsingPOST3Created, error)

	DeleteLssUsingDELETE3(params *DeleteLssUsingDELETE3Params, opts ...ClientOption) (*DeleteLssUsingDELETE3NoContent, error)

	GetAllUsingGET8(params *GetAllUsingGET8Params, opts ...ClientOption) (*GetAllUsingGET8OK, error)

	GetListOfLssClientTypesUsingGET1(params *GetListOfLssClientTypesUsingGET1Params, opts ...ClientOption) (*GetListOfLssClientTypesUsingGET1OK, error)

	GetLssLogFormatUsingGET3(params *GetLssLogFormatUsingGET3Params, opts ...ClientOption) (*GetLssLogFormatUsingGET3OK, error)

	GetLssUsingGET3(params *GetLssUsingGET3Params, opts ...ClientOption) (*GetLssUsingGET3OK, error)

	GetStatusCodesUsingGET1(params *GetStatusCodesUsingGET1Params, opts ...ClientOption) (*GetStatusCodesUsingGET1OK, error)

	UpdateLssUsingPUT3(params *UpdateLssUsingPUT3Params, opts ...ClientOption) (*UpdateLssUsingPUT3Created, *UpdateLssUsingPUT3NoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddLssUsingPOST3 adds a new l s s for a given customer
*/
func (a *Client) AddLssUsingPOST3(params *AddLssUsingPOST3Params, opts ...ClientOption) (*AddLssUsingPOST3Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddLssUsingPOST3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "addLssUsingPOST_3",
		Method:             "POST",
		PathPattern:        "/mgmtconfig/v2/admin/customers/{customerId}/lssConfig",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddLssUsingPOST3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddLssUsingPOST3Created)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addLssUsingPOST_3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteLssUsingDELETE3 deletes a l s s attribute
*/
func (a *Client) DeleteLssUsingDELETE3(params *DeleteLssUsingDELETE3Params, opts ...ClientOption) (*DeleteLssUsingDELETE3NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLssUsingDELETE3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteLssUsingDELETE_3",
		Method:             "DELETE",
		PathPattern:        "/mgmtconfig/v2/admin/customers/{customerId}/lssConfig/{lssId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLssUsingDELETE3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLssUsingDELETE3NoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteLssUsingDELETE_3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllUsingGET8 gets all l s s configured for a given customer
*/
func (a *Client) GetAllUsingGET8(params *GetAllUsingGET8Params, opts ...ClientOption) (*GetAllUsingGET8OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUsingGET8Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllUsingGET_8",
		Method:             "GET",
		PathPattern:        "/mgmtconfig/v2/admin/customers/{customerId}/lssConfig",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllUsingGET8Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllUsingGET8OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllUsingGET_8: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetListOfLssClientTypesUsingGET1 gets list of all l s s client types
*/
func (a *Client) GetListOfLssClientTypesUsingGET1(params *GetListOfLssClientTypesUsingGET1Params, opts ...ClientOption) (*GetListOfLssClientTypesUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListOfLssClientTypesUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getListOfLssClientTypesUsingGET_1",
		Method:             "GET",
		PathPattern:        "/mgmtconfig/v2/admin/lssConfig/clientTypes",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetListOfLssClientTypesUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetListOfLssClientTypesUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getListOfLssClientTypesUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLssLogFormatUsingGET3 gets all l s s log format
*/
func (a *Client) GetLssLogFormatUsingGET3(params *GetLssLogFormatUsingGET3Params, opts ...ClientOption) (*GetLssLogFormatUsingGET3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLssLogFormatUsingGET3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLssLogFormatUsingGET_3",
		Method:             "GET",
		PathPattern:        "/mgmtconfig/v2/admin/lssConfig/logType/formats",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLssLogFormatUsingGET3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLssLogFormatUsingGET3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLssLogFormatUsingGET_3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLssUsingGET3 gets the l s s details
*/
func (a *Client) GetLssUsingGET3(params *GetLssUsingGET3Params, opts ...ClientOption) (*GetLssUsingGET3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLssUsingGET3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLssUsingGET_3",
		Method:             "GET",
		PathPattern:        "/mgmtconfig/v2/admin/customers/{customerId}/lssConfig/{lssId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLssUsingGET3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLssUsingGET3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLssUsingGET_3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStatusCodesUsingGET1 gets list of l s s status codes
*/
func (a *Client) GetStatusCodesUsingGET1(params *GetStatusCodesUsingGET1Params, opts ...ClientOption) (*GetStatusCodesUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStatusCodesUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getStatusCodesUsingGET_1",
		Method:             "GET",
		PathPattern:        "/mgmtconfig/v2/admin/lssConfig/statusCodes",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStatusCodesUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStatusCodesUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStatusCodesUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateLssUsingPUT3 updates a l s s attribute
*/
func (a *Client) UpdateLssUsingPUT3(params *UpdateLssUsingPUT3Params, opts ...ClientOption) (*UpdateLssUsingPUT3Created, *UpdateLssUsingPUT3NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLssUsingPUT3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateLssUsingPUT_3",
		Method:             "PUT",
		PathPattern:        "/mgmtconfig/v2/admin/customers/{customerId}/lssConfig/{lssId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateLssUsingPUT3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateLssUsingPUT3Created:
		return value, nil, nil
	case *UpdateLssUsingPUT3NoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for lss_config_controller_v_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
