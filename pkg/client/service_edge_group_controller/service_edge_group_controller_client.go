// Code generated by go-swagger; DO NOT EDIT.

package service_edge_group_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new service edge group controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for service edge group controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddServiceEdgeGroupUsingPOST(params *AddServiceEdgeGroupUsingPOSTParams, opts ...ClientOption) (*AddServiceEdgeGroupUsingPOSTCreated, error)

	DeleteServiceEdgeGroupUsingDELETE(params *DeleteServiceEdgeGroupUsingDELETEParams, opts ...ClientOption) (*DeleteServiceEdgeGroupUsingDELETENoContent, error)

	GetServiceEdgeGroupUsingGET(params *GetServiceEdgeGroupUsingGETParams, opts ...ClientOption) (*GetServiceEdgeGroupUsingGETOK, error)

	GetServiceEdgeGroupsUsingGET(params *GetServiceEdgeGroupsUsingGETParams, opts ...ClientOption) (*GetServiceEdgeGroupsUsingGETOK, error)

	UpdateServiceEdgeGroupUsingPUT(params *UpdateServiceEdgeGroupUsingPUTParams, opts ...ClientOption) (*UpdateServiceEdgeGroupUsingPUTCreated, *UpdateServiceEdgeGroupUsingPUTNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddServiceEdgeGroupUsingPOST adds a new service edge group
*/
func (a *Client) AddServiceEdgeGroupUsingPOST(params *AddServiceEdgeGroupUsingPOSTParams, opts ...ClientOption) (*AddServiceEdgeGroupUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddServiceEdgeGroupUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addServiceEdgeGroupUsingPOST",
		Method:             "POST",
		PathPattern:        "/mgmtconfig/v1/admin/customers/{customerId}/serviceEdgeGroup",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddServiceEdgeGroupUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddServiceEdgeGroupUsingPOSTCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addServiceEdgeGroupUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteServiceEdgeGroupUsingDELETE deletes the service edge group
*/
func (a *Client) DeleteServiceEdgeGroupUsingDELETE(params *DeleteServiceEdgeGroupUsingDELETEParams, opts ...ClientOption) (*DeleteServiceEdgeGroupUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServiceEdgeGroupUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteServiceEdgeGroupUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/mgmtconfig/v1/admin/customers/{customerId}/serviceEdgeGroup/{serviceEdgeGroupId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteServiceEdgeGroupUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteServiceEdgeGroupUsingDELETENoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteServiceEdgeGroupUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetServiceEdgeGroupUsingGET gets the service edge group details
*/
func (a *Client) GetServiceEdgeGroupUsingGET(params *GetServiceEdgeGroupUsingGETParams, opts ...ClientOption) (*GetServiceEdgeGroupUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceEdgeGroupUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getServiceEdgeGroupUsingGET",
		Method:             "GET",
		PathPattern:        "/mgmtconfig/v1/admin/customers/{customerId}/serviceEdgeGroup/{serviceEdgeGroupId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServiceEdgeGroupUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceEdgeGroupUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServiceEdgeGroupUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetServiceEdgeGroupsUsingGET gets all the configured service edge group details
*/
func (a *Client) GetServiceEdgeGroupsUsingGET(params *GetServiceEdgeGroupsUsingGETParams, opts ...ClientOption) (*GetServiceEdgeGroupsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceEdgeGroupsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getServiceEdgeGroupsUsingGET",
		Method:             "GET",
		PathPattern:        "/mgmtconfig/v1/admin/customers/{customerId}/serviceEdgeGroup",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServiceEdgeGroupsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceEdgeGroupsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServiceEdgeGroupsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateServiceEdgeGroupUsingPUT updates the service edge group details
*/
func (a *Client) UpdateServiceEdgeGroupUsingPUT(params *UpdateServiceEdgeGroupUsingPUTParams, opts ...ClientOption) (*UpdateServiceEdgeGroupUsingPUTCreated, *UpdateServiceEdgeGroupUsingPUTNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServiceEdgeGroupUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateServiceEdgeGroupUsingPUT",
		Method:             "PUT",
		PathPattern:        "/mgmtconfig/v1/admin/customers/{customerId}/serviceEdgeGroup/{serviceEdgeGroupId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateServiceEdgeGroupUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateServiceEdgeGroupUsingPUTCreated:
		return value, nil, nil
	case *UpdateServiceEdgeGroupUsingPUTNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for service_edge_group_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
