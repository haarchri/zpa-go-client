// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonAppConfigDto common app config dto
//
// swagger:model CommonAppConfigDto
type CommonAppConfigDto struct {

	// allow options
	AllowOptions bool `json:"allowOptions,omitempty"`

	// app Id
	AppID int64 `json:"appId,omitempty"`

	// app types
	AppTypes []string `json:"appTypes"`

	// application port
	ApplicationPort int32 `json:"applicationPort,omitempty"`

	// application protocol
	// Enum: [HTTP HTTPS FTP RDP]
	ApplicationProtocol string `json:"applicationProtocol,omitempty"`

	// ba app Id
	BaAppID int64 `json:"baAppId,omitempty"`

	// certificate Id
	CertificateID int64 `json:"certificateId,omitempty"`

	// certificate name
	CertificateName string `json:"certificateName,omitempty"`

	// cname
	Cname string `json:"cname,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// domain
	Domain string `json:"domain,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// hidden
	Hidden bool `json:"hidden,omitempty"`

	// inspect app Id
	InspectAppID int64 `json:"inspectAppId,omitempty"`

	// local domain
	LocalDomain string `json:"localDomain,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// portal
	Portal bool `json:"portal,omitempty"`

	// trust untrusted cert
	TrustUntrustedCert bool `json:"trustUntrustedCert,omitempty"`
}

// Validate validates this common app config dto
func (m *CommonAppConfigDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplicationProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var commonAppConfigDtoAppTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BROWSER_ACCESS","SIPA","INSPECT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonAppConfigDtoAppTypesItemsEnum = append(commonAppConfigDtoAppTypesItemsEnum, v)
	}
}

func (m *CommonAppConfigDto) validateAppTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonAppConfigDtoAppTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonAppConfigDto) validateAppTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.AppTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.AppTypes); i++ {

		// value enum
		if err := m.validateAppTypesItemsEnum("appTypes"+"."+strconv.Itoa(i), "body", m.AppTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

var commonAppConfigDtoTypeApplicationProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HTTP","HTTPS","FTP","RDP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonAppConfigDtoTypeApplicationProtocolPropEnum = append(commonAppConfigDtoTypeApplicationProtocolPropEnum, v)
	}
}

const (

	// CommonAppConfigDtoApplicationProtocolHTTP captures enum value "HTTP"
	CommonAppConfigDtoApplicationProtocolHTTP string = "HTTP"

	// CommonAppConfigDtoApplicationProtocolHTTPS captures enum value "HTTPS"
	CommonAppConfigDtoApplicationProtocolHTTPS string = "HTTPS"

	// CommonAppConfigDtoApplicationProtocolFTP captures enum value "FTP"
	CommonAppConfigDtoApplicationProtocolFTP string = "FTP"

	// CommonAppConfigDtoApplicationProtocolRDP captures enum value "RDP"
	CommonAppConfigDtoApplicationProtocolRDP string = "RDP"
)

// prop value enum
func (m *CommonAppConfigDto) validateApplicationProtocolEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonAppConfigDtoTypeApplicationProtocolPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonAppConfigDto) validateApplicationProtocol(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationProtocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateApplicationProtocolEnum("applicationProtocol", "body", m.ApplicationProtocol); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this common app config dto based on context it is used
func (m *CommonAppConfigDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CommonAppConfigDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonAppConfigDto) UnmarshalBinary(b []byte) error {
	var res CommonAppConfigDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
