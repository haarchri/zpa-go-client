// Code generated by go-swagger; DO NOT EDIT.

package app_server_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new app server controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for app server controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddAppServerUsingPOST1(params *AddAppServerUsingPOST1Params, opts ...ClientOption) (*AddAppServerUsingPOST1Created, error)

	DeleteAppServerUsingDELETE1(params *DeleteAppServerUsingDELETE1Params, opts ...ClientOption) (*DeleteAppServerUsingDELETE1NoContent, error)

	GetAllAppServersUsingGET1(params *GetAllAppServersUsingGET1Params, opts ...ClientOption) (*GetAllAppServersUsingGET1OK, error)

	GetAppServerUsingGET1(params *GetAppServerUsingGET1Params, opts ...ClientOption) (*GetAppServerUsingGET1OK, error)

	UpdateAppServerUsingPUT1(params *UpdateAppServerUsingPUT1Params, opts ...ClientOption) (*UpdateAppServerUsingPUT1Created, *UpdateAppServerUsingPUT1NoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddAppServerUsingPOST1 adds a new server
*/
func (a *Client) AddAppServerUsingPOST1(params *AddAppServerUsingPOST1Params, opts ...ClientOption) (*AddAppServerUsingPOST1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAppServerUsingPOST1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "addAppServerUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/mgmtconfig/v1/admin/customers/{customerId}/server",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddAppServerUsingPOST1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddAppServerUsingPOST1Created)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addAppServerUsingPOST_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAppServerUsingDELETE1 deletes a server
*/
func (a *Client) DeleteAppServerUsingDELETE1(params *DeleteAppServerUsingDELETE1Params, opts ...ClientOption) (*DeleteAppServerUsingDELETE1NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAppServerUsingDELETE1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAppServerUsingDELETE_1",
		Method:             "DELETE",
		PathPattern:        "/mgmtconfig/v1/admin/customers/{customerId}/server/{serverId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAppServerUsingDELETE1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAppServerUsingDELETE1NoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAppServerUsingDELETE_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllAppServersUsingGET1 gets all the configured servers
*/
func (a *Client) GetAllAppServersUsingGET1(params *GetAllAppServersUsingGET1Params, opts ...ClientOption) (*GetAllAppServersUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllAppServersUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllAppServersUsingGET_1",
		Method:             "GET",
		PathPattern:        "/mgmtconfig/v1/admin/customers/{customerId}/server",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllAppServersUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllAppServersUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllAppServersUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAppServerUsingGET1 gets the server details
*/
func (a *Client) GetAppServerUsingGET1(params *GetAppServerUsingGET1Params, opts ...ClientOption) (*GetAppServerUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppServerUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAppServerUsingGET_1",
		Method:             "GET",
		PathPattern:        "/mgmtconfig/v1/admin/customers/{customerId}/server/{serverId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAppServerUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAppServerUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAppServerUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAppServerUsingPUT1 updates the server details
*/
func (a *Client) UpdateAppServerUsingPUT1(params *UpdateAppServerUsingPUT1Params, opts ...ClientOption) (*UpdateAppServerUsingPUT1Created, *UpdateAppServerUsingPUT1NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAppServerUsingPUT1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAppServerUsingPUT_1",
		Method:             "PUT",
		PathPattern:        "/mgmtconfig/v1/admin/customers/{customerId}/server/{serverId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAppServerUsingPUT1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateAppServerUsingPUT1Created:
		return value, nil, nil
	case *UpdateAppServerUsingPUT1NoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for app_server_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
