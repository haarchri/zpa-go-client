// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PolicyRuleResource policy rule resource
//
// swagger:model PolicyRuleResource
type PolicyRuleResource struct {

	// action
	// Enum: [ALLOW DENY LOG RE_AUTH NEVER BYPASS INTERCEPT NO_DOWNLOAD BYPASS_RE_AUTH INTERCEPT_ACCESSIBLE ISOLATE BYPASS_ISOLATE INSPECT BYPASS_INSPECT]
	Action string `json:"action,omitempty"`

	// action Id
	ActionID string `json:"actionId,omitempty"`

	// app connector groups
	AppConnectorGroups []*AppConnectorGroupResource `json:"appConnectorGroups"`

	// app server groups
	AppServerGroups []*AppServerGroupResource `json:"appServerGroups"`

	// audit message
	AuditMessage string `json:"auditMessage,omitempty"`

	// conditions
	Conditions []*ConditionSetResource `json:"conditions"`

	// Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.
	CreationTime string `json:"creationTime,omitempty"`

	// custom msg
	CustomMsg string `json:"customMsg,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.
	ID string `json:"id,omitempty"`

	// Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.
	ModifiedBy string `json:"modifiedBy,omitempty"`

	// Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.
	ModifiedTime string `json:"modifiedTime,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// operator
	// Enum: [AND OR]
	Operator string `json:"operator,omitempty"`

	// policy set Id
	PolicySetID string `json:"policySetId,omitempty"`

	// policy type
	PolicyType string `json:"policyType,omitempty"`

	// priority
	Priority string `json:"priority,omitempty"`

	// reauth idle timeout
	ReauthIdleTimeout string `json:"reauthIdleTimeout,omitempty"`

	// reauth timeout
	ReauthTimeout string `json:"reauthTimeout,omitempty"`

	// rule order
	RuleOrder string `json:"ruleOrder,omitempty"`

	// version
	Version string `json:"version,omitempty"`

	// zpn cbi profile Id
	ZpnCbiProfileID string `json:"zpnCbiProfileId,omitempty"`

	// zpn inspection profile Id
	ZpnInspectionProfileID string `json:"zpnInspectionProfileId,omitempty"`

	// zpn inspection profile name
	ZpnInspectionProfileName string `json:"zpnInspectionProfileName,omitempty"`
}

// Validate validates this policy rule resource
func (m *PolicyRuleResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppConnectorGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppServerGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var policyRuleResourceTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ALLOW","DENY","LOG","RE_AUTH","NEVER","BYPASS","INTERCEPT","NO_DOWNLOAD","BYPASS_RE_AUTH","INTERCEPT_ACCESSIBLE","ISOLATE","BYPASS_ISOLATE","INSPECT","BYPASS_INSPECT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyRuleResourceTypeActionPropEnum = append(policyRuleResourceTypeActionPropEnum, v)
	}
}

const (

	// PolicyRuleResourceActionALLOW captures enum value "ALLOW"
	PolicyRuleResourceActionALLOW string = "ALLOW"

	// PolicyRuleResourceActionDENY captures enum value "DENY"
	PolicyRuleResourceActionDENY string = "DENY"

	// PolicyRuleResourceActionLOG captures enum value "LOG"
	PolicyRuleResourceActionLOG string = "LOG"

	// PolicyRuleResourceActionREAUTH captures enum value "RE_AUTH"
	PolicyRuleResourceActionREAUTH string = "RE_AUTH"

	// PolicyRuleResourceActionNEVER captures enum value "NEVER"
	PolicyRuleResourceActionNEVER string = "NEVER"

	// PolicyRuleResourceActionBYPASS captures enum value "BYPASS"
	PolicyRuleResourceActionBYPASS string = "BYPASS"

	// PolicyRuleResourceActionINTERCEPT captures enum value "INTERCEPT"
	PolicyRuleResourceActionINTERCEPT string = "INTERCEPT"

	// PolicyRuleResourceActionNODOWNLOAD captures enum value "NO_DOWNLOAD"
	PolicyRuleResourceActionNODOWNLOAD string = "NO_DOWNLOAD"

	// PolicyRuleResourceActionBYPASSREAUTH captures enum value "BYPASS_RE_AUTH"
	PolicyRuleResourceActionBYPASSREAUTH string = "BYPASS_RE_AUTH"

	// PolicyRuleResourceActionINTERCEPTACCESSIBLE captures enum value "INTERCEPT_ACCESSIBLE"
	PolicyRuleResourceActionINTERCEPTACCESSIBLE string = "INTERCEPT_ACCESSIBLE"

	// PolicyRuleResourceActionISOLATE captures enum value "ISOLATE"
	PolicyRuleResourceActionISOLATE string = "ISOLATE"

	// PolicyRuleResourceActionBYPASSISOLATE captures enum value "BYPASS_ISOLATE"
	PolicyRuleResourceActionBYPASSISOLATE string = "BYPASS_ISOLATE"

	// PolicyRuleResourceActionINSPECT captures enum value "INSPECT"
	PolicyRuleResourceActionINSPECT string = "INSPECT"

	// PolicyRuleResourceActionBYPASSINSPECT captures enum value "BYPASS_INSPECT"
	PolicyRuleResourceActionBYPASSINSPECT string = "BYPASS_INSPECT"
)

// prop value enum
func (m *PolicyRuleResource) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policyRuleResourceTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PolicyRuleResource) validateAction(formats strfmt.Registry) error {
	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *PolicyRuleResource) validateAppConnectorGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.AppConnectorGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.AppConnectorGroups); i++ {
		if swag.IsZero(m.AppConnectorGroups[i]) { // not required
			continue
		}

		if m.AppConnectorGroups[i] != nil {
			if err := m.AppConnectorGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appConnectorGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("appConnectorGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyRuleResource) validateAppServerGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.AppServerGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.AppServerGroups); i++ {
		if swag.IsZero(m.AppServerGroups[i]) { // not required
			continue
		}

		if m.AppServerGroups[i] != nil {
			if err := m.AppServerGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appServerGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("appServerGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyRuleResource) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var policyRuleResourceTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AND","OR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyRuleResourceTypeOperatorPropEnum = append(policyRuleResourceTypeOperatorPropEnum, v)
	}
}

const (

	// PolicyRuleResourceOperatorAND captures enum value "AND"
	PolicyRuleResourceOperatorAND string = "AND"

	// PolicyRuleResourceOperatorOR captures enum value "OR"
	PolicyRuleResourceOperatorOR string = "OR"
)

// prop value enum
func (m *PolicyRuleResource) validateOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policyRuleResourceTypeOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PolicyRuleResource) validateOperator(formats strfmt.Registry) error {
	if swag.IsZero(m.Operator) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", m.Operator); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this policy rule resource based on the context it is used
func (m *PolicyRuleResource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppConnectorGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAppServerGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyRuleResource) contextValidateAppConnectorGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AppConnectorGroups); i++ {

		if m.AppConnectorGroups[i] != nil {
			if err := m.AppConnectorGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appConnectorGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("appConnectorGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyRuleResource) contextValidateAppServerGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AppServerGroups); i++ {

		if m.AppServerGroups[i] != nil {
			if err := m.AppServerGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appServerGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("appServerGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyRuleResource) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Conditions); i++ {

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicyRuleResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyRuleResource) UnmarshalBinary(b []byte) error {
	var res PolicyRuleResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
