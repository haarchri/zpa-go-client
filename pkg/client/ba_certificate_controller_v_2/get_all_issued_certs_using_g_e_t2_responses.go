// Code generated by go-swagger; DO NOT EDIT.

package ba_certificate_controller_v_2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/haarchri/zpa-go-client/pkg/models"
)

// GetAllIssuedCertsUsingGET2Reader is a Reader for the GetAllIssuedCertsUsingGET2 structure.
type GetAllIssuedCertsUsingGET2Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllIssuedCertsUsingGET2Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllIssuedCertsUsingGET2OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAllIssuedCertsUsingGET2BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAllIssuedCertsUsingGET2Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllIssuedCertsUsingGET2Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllIssuedCertsUsingGET2NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetAllIssuedCertsUsingGET2TooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAllIssuedCertsUsingGET2OK creates a GetAllIssuedCertsUsingGET2OK with default headers values
func NewGetAllIssuedCertsUsingGET2OK() *GetAllIssuedCertsUsingGET2OK {
	return &GetAllIssuedCertsUsingGET2OK{}
}

/* GetAllIssuedCertsUsingGET2OK describes a response with status code 200, with default header values.

OK
*/
type GetAllIssuedCertsUsingGET2OK struct {
	Payload *models.PageListOfBACertificate
}

func (o *GetAllIssuedCertsUsingGET2OK) Error() string {
	return fmt.Sprintf("[GET /mgmtconfig/v2/admin/customers/{customerId}/clientlessCertificate/issued][%d] getAllIssuedCertsUsingGET2OK  %+v", 200, o.Payload)
}
func (o *GetAllIssuedCertsUsingGET2OK) GetPayload() *models.PageListOfBACertificate {
	return o.Payload
}

func (o *GetAllIssuedCertsUsingGET2OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PageListOfBACertificate)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllIssuedCertsUsingGET2BadRequest creates a GetAllIssuedCertsUsingGET2BadRequest with default headers values
func NewGetAllIssuedCertsUsingGET2BadRequest() *GetAllIssuedCertsUsingGET2BadRequest {
	return &GetAllIssuedCertsUsingGET2BadRequest{}
}

/* GetAllIssuedCertsUsingGET2BadRequest describes a response with status code 400, with default header values.

BadRequest
*/
type GetAllIssuedCertsUsingGET2BadRequest struct {
}

func (o *GetAllIssuedCertsUsingGET2BadRequest) Error() string {
	return fmt.Sprintf("[GET /mgmtconfig/v2/admin/customers/{customerId}/clientlessCertificate/issued][%d] getAllIssuedCertsUsingGET2BadRequest ", 400)
}

func (o *GetAllIssuedCertsUsingGET2BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllIssuedCertsUsingGET2Unauthorized creates a GetAllIssuedCertsUsingGET2Unauthorized with default headers values
func NewGetAllIssuedCertsUsingGET2Unauthorized() *GetAllIssuedCertsUsingGET2Unauthorized {
	return &GetAllIssuedCertsUsingGET2Unauthorized{}
}

/* GetAllIssuedCertsUsingGET2Unauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAllIssuedCertsUsingGET2Unauthorized struct {
}

func (o *GetAllIssuedCertsUsingGET2Unauthorized) Error() string {
	return fmt.Sprintf("[GET /mgmtconfig/v2/admin/customers/{customerId}/clientlessCertificate/issued][%d] getAllIssuedCertsUsingGET2Unauthorized ", 401)
}

func (o *GetAllIssuedCertsUsingGET2Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllIssuedCertsUsingGET2Forbidden creates a GetAllIssuedCertsUsingGET2Forbidden with default headers values
func NewGetAllIssuedCertsUsingGET2Forbidden() *GetAllIssuedCertsUsingGET2Forbidden {
	return &GetAllIssuedCertsUsingGET2Forbidden{}
}

/* GetAllIssuedCertsUsingGET2Forbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAllIssuedCertsUsingGET2Forbidden struct {
}

func (o *GetAllIssuedCertsUsingGET2Forbidden) Error() string {
	return fmt.Sprintf("[GET /mgmtconfig/v2/admin/customers/{customerId}/clientlessCertificate/issued][%d] getAllIssuedCertsUsingGET2Forbidden ", 403)
}

func (o *GetAllIssuedCertsUsingGET2Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllIssuedCertsUsingGET2NotFound creates a GetAllIssuedCertsUsingGET2NotFound with default headers values
func NewGetAllIssuedCertsUsingGET2NotFound() *GetAllIssuedCertsUsingGET2NotFound {
	return &GetAllIssuedCertsUsingGET2NotFound{}
}

/* GetAllIssuedCertsUsingGET2NotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllIssuedCertsUsingGET2NotFound struct {
}

func (o *GetAllIssuedCertsUsingGET2NotFound) Error() string {
	return fmt.Sprintf("[GET /mgmtconfig/v2/admin/customers/{customerId}/clientlessCertificate/issued][%d] getAllIssuedCertsUsingGET2NotFound ", 404)
}

func (o *GetAllIssuedCertsUsingGET2NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllIssuedCertsUsingGET2TooManyRequests creates a GetAllIssuedCertsUsingGET2TooManyRequests with default headers values
func NewGetAllIssuedCertsUsingGET2TooManyRequests() *GetAllIssuedCertsUsingGET2TooManyRequests {
	return &GetAllIssuedCertsUsingGET2TooManyRequests{}
}

/* GetAllIssuedCertsUsingGET2TooManyRequests describes a response with status code 429, with default header values.

TooManyRequest
*/
type GetAllIssuedCertsUsingGET2TooManyRequests struct {
}

func (o *GetAllIssuedCertsUsingGET2TooManyRequests) Error() string {
	return fmt.Sprintf("[GET /mgmtconfig/v2/admin/customers/{customerId}/clientlessCertificate/issued][%d] getAllIssuedCertsUsingGET2TooManyRequests ", 429)
}

func (o *GetAllIssuedCertsUsingGET2TooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
