// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Operand operand
//
// swagger:model Operand
type Operand struct {

	// creation time
	CreationTime int32 `json:"creationTime,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// idp Id
	IdpID int64 `json:"idpId,omitempty"`

	// lhs
	LHS string `json:"lhs,omitempty"`

	// modified by
	ModifiedBy int64 `json:"modifiedBy,omitempty"`

	// modified time
	ModifiedTime int32 `json:"modifiedTime,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// object type
	// Enum: [USER USER_GROUP LOCATION APP APP_GROUP SAML POSTURE CLIENT_TYPE IDP TRUSTED_NETWORK EDGE_CONNECTOR_GROUP MACHINE_GRP SCIM SCIM_GROUP]
	ObjectType string `json:"objectType,omitempty"`

	// rhs
	RHS string `json:"rhs,omitempty"`
}

// Validate validates this operand
func (m *Operand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjectType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var operandTypeObjectTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["USER","USER_GROUP","LOCATION","APP","APP_GROUP","SAML","POSTURE","CLIENT_TYPE","IDP","TRUSTED_NETWORK","EDGE_CONNECTOR_GROUP","MACHINE_GRP","SCIM","SCIM_GROUP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		operandTypeObjectTypePropEnum = append(operandTypeObjectTypePropEnum, v)
	}
}

const (

	// OperandObjectTypeUSER captures enum value "USER"
	OperandObjectTypeUSER string = "USER"

	// OperandObjectTypeUSERGROUP captures enum value "USER_GROUP"
	OperandObjectTypeUSERGROUP string = "USER_GROUP"

	// OperandObjectTypeLOCATION captures enum value "LOCATION"
	OperandObjectTypeLOCATION string = "LOCATION"

	// OperandObjectTypeAPP captures enum value "APP"
	OperandObjectTypeAPP string = "APP"

	// OperandObjectTypeAPPGROUP captures enum value "APP_GROUP"
	OperandObjectTypeAPPGROUP string = "APP_GROUP"

	// OperandObjectTypeSAML captures enum value "SAML"
	OperandObjectTypeSAML string = "SAML"

	// OperandObjectTypePOSTURE captures enum value "POSTURE"
	OperandObjectTypePOSTURE string = "POSTURE"

	// OperandObjectTypeCLIENTTYPE captures enum value "CLIENT_TYPE"
	OperandObjectTypeCLIENTTYPE string = "CLIENT_TYPE"

	// OperandObjectTypeIDP captures enum value "IDP"
	OperandObjectTypeIDP string = "IDP"

	// OperandObjectTypeTRUSTEDNETWORK captures enum value "TRUSTED_NETWORK"
	OperandObjectTypeTRUSTEDNETWORK string = "TRUSTED_NETWORK"

	// OperandObjectTypeEDGECONNECTORGROUP captures enum value "EDGE_CONNECTOR_GROUP"
	OperandObjectTypeEDGECONNECTORGROUP string = "EDGE_CONNECTOR_GROUP"

	// OperandObjectTypeMACHINEGRP captures enum value "MACHINE_GRP"
	OperandObjectTypeMACHINEGRP string = "MACHINE_GRP"

	// OperandObjectTypeSCIM captures enum value "SCIM"
	OperandObjectTypeSCIM string = "SCIM"

	// OperandObjectTypeSCIMGROUP captures enum value "SCIM_GROUP"
	OperandObjectTypeSCIMGROUP string = "SCIM_GROUP"
)

// prop value enum
func (m *Operand) validateObjectTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, operandTypeObjectTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Operand) validateObjectType(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectType) { // not required
		return nil
	}

	// value enum
	if err := m.validateObjectTypeEnum("objectType", "body", m.ObjectType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this operand based on context it is used
func (m *Operand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Operand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Operand) UnmarshalBinary(b []byte) error {
	var res Operand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
