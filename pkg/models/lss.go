// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Lss lss
//
// swagger:model Lss
type Lss struct {

	// audit message
	AuditMessage string `json:"auditMessage,omitempty"`

	// creation time
	CreationTime string `json:"creationTime,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// filter
	Filter []string `json:"filter"`

	// format
	Format string `json:"format,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// lss host
	LssHost string `json:"lssHost,omitempty"`

	// lss port
	LssPort string `json:"lssPort,omitempty"`

	// modified by
	ModifiedBy string `json:"modifiedBy,omitempty"`

	// modified time
	ModifiedTime string `json:"modifiedTime,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// source log type
	// Enum: [zpn_trans_log zpn_auth_log zpn_ast_auth_log zpn_http_trans_log zpn_audit_log zpn_sys_auth_log zpn_ast_comprehensive_stats zpn_http_insp]
	SourceLogType string `json:"sourceLogType,omitempty"`

	// use Tls
	UseTLS bool `json:"useTls,omitempty"`
}

// Validate validates this lss
func (m *Lss) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceLogType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Lss) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var lssTypeSourceLogTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["zpn_trans_log","zpn_auth_log","zpn_ast_auth_log","zpn_http_trans_log","zpn_audit_log","zpn_sys_auth_log","zpn_ast_comprehensive_stats","zpn_http_insp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lssTypeSourceLogTypePropEnum = append(lssTypeSourceLogTypePropEnum, v)
	}
}

const (

	// LssSourceLogTypeZpnTransLog captures enum value "zpn_trans_log"
	LssSourceLogTypeZpnTransLog string = "zpn_trans_log"

	// LssSourceLogTypeZpnAuthLog captures enum value "zpn_auth_log"
	LssSourceLogTypeZpnAuthLog string = "zpn_auth_log"

	// LssSourceLogTypeZpnAstAuthLog captures enum value "zpn_ast_auth_log"
	LssSourceLogTypeZpnAstAuthLog string = "zpn_ast_auth_log"

	// LssSourceLogTypeZpnHTTPTransLog captures enum value "zpn_http_trans_log"
	LssSourceLogTypeZpnHTTPTransLog string = "zpn_http_trans_log"

	// LssSourceLogTypeZpnAuditLog captures enum value "zpn_audit_log"
	LssSourceLogTypeZpnAuditLog string = "zpn_audit_log"

	// LssSourceLogTypeZpnSysAuthLog captures enum value "zpn_sys_auth_log"
	LssSourceLogTypeZpnSysAuthLog string = "zpn_sys_auth_log"

	// LssSourceLogTypeZpnAstComprehensiveStats captures enum value "zpn_ast_comprehensive_stats"
	LssSourceLogTypeZpnAstComprehensiveStats string = "zpn_ast_comprehensive_stats"

	// LssSourceLogTypeZpnHTTPInsp captures enum value "zpn_http_insp"
	LssSourceLogTypeZpnHTTPInsp string = "zpn_http_insp"
)

// prop value enum
func (m *Lss) validateSourceLogTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, lssTypeSourceLogTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Lss) validateSourceLogType(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceLogType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSourceLogTypeEnum("sourceLogType", "body", m.SourceLogType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this lss based on context it is used
func (m *Lss) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Lss) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Lss) UnmarshalBinary(b []byte) error {
	var res Lss
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
