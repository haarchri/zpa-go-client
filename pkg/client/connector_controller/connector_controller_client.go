// Code generated by go-swagger; DO NOT EDIT.

package connector_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new connector controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for connector controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	BulkDeleteConnectorUsingPOST1(params *BulkDeleteConnectorUsingPOST1Params, opts ...ClientOption) (*BulkDeleteConnectorUsingPOST1OK, *BulkDeleteConnectorUsingPOST1Created, error)

	DeleteConnectorUsingDELETE1(params *DeleteConnectorUsingDELETE1Params, opts ...ClientOption) (*DeleteConnectorUsingDELETE1NoContent, error)

	GetAllConnectorsUsingGET1(params *GetAllConnectorsUsingGET1Params, opts ...ClientOption) (*GetAllConnectorsUsingGET1OK, error)

	GetConnectorUsingGET1(params *GetConnectorUsingGET1Params, opts ...ClientOption) (*GetConnectorUsingGET1OK, error)

	UpdateConnectorUsingPUT1(params *UpdateConnectorUsingPUT1Params, opts ...ClientOption) (*UpdateConnectorUsingPUT1Created, *UpdateConnectorUsingPUT1NoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  BulkDeleteConnectorUsingPOST1 bulks delete the connectors
*/
func (a *Client) BulkDeleteConnectorUsingPOST1(params *BulkDeleteConnectorUsingPOST1Params, opts ...ClientOption) (*BulkDeleteConnectorUsingPOST1OK, *BulkDeleteConnectorUsingPOST1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkDeleteConnectorUsingPOST1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "bulkDeleteConnectorUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/mgmtconfig/v1/admin/customers/{customerId}/connector/bulkDelete",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkDeleteConnectorUsingPOST1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *BulkDeleteConnectorUsingPOST1OK:
		return value, nil, nil
	case *BulkDeleteConnectorUsingPOST1Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connector_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteConnectorUsingDELETE1 deletes the connector
*/
func (a *Client) DeleteConnectorUsingDELETE1(params *DeleteConnectorUsingDELETE1Params, opts ...ClientOption) (*DeleteConnectorUsingDELETE1NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteConnectorUsingDELETE1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteConnectorUsingDELETE_1",
		Method:             "DELETE",
		PathPattern:        "/mgmtconfig/v1/admin/customers/{customerId}/connector/{connectorId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteConnectorUsingDELETE1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteConnectorUsingDELETE1NoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteConnectorUsingDELETE_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllConnectorsUsingGET1 gets all the configured connector details
*/
func (a *Client) GetAllConnectorsUsingGET1(params *GetAllConnectorsUsingGET1Params, opts ...ClientOption) (*GetAllConnectorsUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllConnectorsUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllConnectorsUsingGET_1",
		Method:             "GET",
		PathPattern:        "/mgmtconfig/v1/admin/customers/{customerId}/connector",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllConnectorsUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllConnectorsUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllConnectorsUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetConnectorUsingGET1 gets the connector details
*/
func (a *Client) GetConnectorUsingGET1(params *GetConnectorUsingGET1Params, opts ...ClientOption) (*GetConnectorUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConnectorUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getConnectorUsingGET_1",
		Method:             "GET",
		PathPattern:        "/mgmtconfig/v1/admin/customers/{customerId}/connector/{connectorId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetConnectorUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConnectorUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getConnectorUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateConnectorUsingPUT1 updates the connector details
*/
func (a *Client) UpdateConnectorUsingPUT1(params *UpdateConnectorUsingPUT1Params, opts ...ClientOption) (*UpdateConnectorUsingPUT1Created, *UpdateConnectorUsingPUT1NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateConnectorUsingPUT1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateConnectorUsingPUT_1",
		Method:             "PUT",
		PathPattern:        "/mgmtconfig/v1/admin/customers/{customerId}/connector/{connectorId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateConnectorUsingPUT1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateConnectorUsingPUT1Created:
		return value, nil, nil
	case *UpdateConnectorUsingPUT1NoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connector_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
